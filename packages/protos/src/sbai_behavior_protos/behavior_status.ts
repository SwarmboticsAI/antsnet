// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_behavior_protos/behavior_status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_behavior_protos";

export enum BehaviorState {
  BEHAVIOR_STATE_UNSPECIFIED = 0,
  BEHAVIOR_STATE_READY = 1,
  BEHAVIOR_STATE_RUNNING = 2,
  BEHAVIOR_STATE_SUCCESS = 3,
  BEHAVIOR_STATE_FAILED = 4,
  UNRECOGNIZED = -1,
}

export function behaviorStateFromJSON(object: any): BehaviorState {
  switch (object) {
    case 0:
    case "BEHAVIOR_STATE_UNSPECIFIED":
      return BehaviorState.BEHAVIOR_STATE_UNSPECIFIED;
    case 1:
    case "BEHAVIOR_STATE_READY":
      return BehaviorState.BEHAVIOR_STATE_READY;
    case 2:
    case "BEHAVIOR_STATE_RUNNING":
      return BehaviorState.BEHAVIOR_STATE_RUNNING;
    case 3:
    case "BEHAVIOR_STATE_SUCCESS":
      return BehaviorState.BEHAVIOR_STATE_SUCCESS;
    case 4:
    case "BEHAVIOR_STATE_FAILED":
      return BehaviorState.BEHAVIOR_STATE_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BehaviorState.UNRECOGNIZED;
  }
}

export function behaviorStateToJSON(object: BehaviorState): string {
  switch (object) {
    case BehaviorState.BEHAVIOR_STATE_UNSPECIFIED:
      return "BEHAVIOR_STATE_UNSPECIFIED";
    case BehaviorState.BEHAVIOR_STATE_READY:
      return "BEHAVIOR_STATE_READY";
    case BehaviorState.BEHAVIOR_STATE_RUNNING:
      return "BEHAVIOR_STATE_RUNNING";
    case BehaviorState.BEHAVIOR_STATE_SUCCESS:
      return "BEHAVIOR_STATE_SUCCESS";
    case BehaviorState.BEHAVIOR_STATE_FAILED:
      return "BEHAVIOR_STATE_FAILED";
    case BehaviorState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BehaviorStatus {
  behaviorRequestId: string;
  robotId: string;
  behaviorState: BehaviorState;
}

function createBaseBehaviorStatus(): BehaviorStatus {
  return { behaviorRequestId: "", robotId: "", behaviorState: 0 };
}

export const BehaviorStatus: MessageFns<BehaviorStatus> = {
  encode(message: BehaviorStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.behaviorRequestId !== "") {
      writer.uint32(10).string(message.behaviorRequestId);
    }
    if (message.robotId !== "") {
      writer.uint32(18).string(message.robotId);
    }
    if (message.behaviorState !== 0) {
      writer.uint32(24).int32(message.behaviorState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BehaviorStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBehaviorStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.behaviorRequestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.robotId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.behaviorState = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BehaviorStatus {
    return {
      behaviorRequestId: isSet(object.behaviorRequestId) ? globalThis.String(object.behaviorRequestId) : "",
      robotId: isSet(object.robotId) ? globalThis.String(object.robotId) : "",
      behaviorState: isSet(object.behaviorState) ? behaviorStateFromJSON(object.behaviorState) : 0,
    };
  },

  toJSON(message: BehaviorStatus): unknown {
    const obj: any = {};
    if (message.behaviorRequestId !== "") {
      obj.behaviorRequestId = message.behaviorRequestId;
    }
    if (message.robotId !== "") {
      obj.robotId = message.robotId;
    }
    if (message.behaviorState !== 0) {
      obj.behaviorState = behaviorStateToJSON(message.behaviorState);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BehaviorStatus>, I>>(base?: I): BehaviorStatus {
    return BehaviorStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BehaviorStatus>, I>>(object: I): BehaviorStatus {
    const message = createBaseBehaviorStatus();
    message.behaviorRequestId = object.behaviorRequestId ?? "";
    message.robotId = object.robotId ?? "";
    message.behaviorState = object.behaviorState ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
