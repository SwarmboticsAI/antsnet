// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_protos/completed_behaviors.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BehaviorRequest } from "./behavior_request";

export const protobufPackage = "sbai_protos";

export enum BehaviorResult {
  BEHAVIOR_RESULT_UNSPECIFIED = 0,
  BEHAVIOR_RESULT_SUCCESS = 1,
  BEHAVIOR_RESULT_FAILED = 2,
  BEHAVIOR_RESULT_CANCELED = 3,
  UNRECOGNIZED = -1,
}

export function behaviorResultFromJSON(object: any): BehaviorResult {
  switch (object) {
    case 0:
    case "BEHAVIOR_RESULT_UNSPECIFIED":
      return BehaviorResult.BEHAVIOR_RESULT_UNSPECIFIED;
    case 1:
    case "BEHAVIOR_RESULT_SUCCESS":
      return BehaviorResult.BEHAVIOR_RESULT_SUCCESS;
    case 2:
    case "BEHAVIOR_RESULT_FAILED":
      return BehaviorResult.BEHAVIOR_RESULT_FAILED;
    case 3:
    case "BEHAVIOR_RESULT_CANCELED":
      return BehaviorResult.BEHAVIOR_RESULT_CANCELED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BehaviorResult.UNRECOGNIZED;
  }
}

export function behaviorResultToJSON(object: BehaviorResult): string {
  switch (object) {
    case BehaviorResult.BEHAVIOR_RESULT_UNSPECIFIED:
      return "BEHAVIOR_RESULT_UNSPECIFIED";
    case BehaviorResult.BEHAVIOR_RESULT_SUCCESS:
      return "BEHAVIOR_RESULT_SUCCESS";
    case BehaviorResult.BEHAVIOR_RESULT_FAILED:
      return "BEHAVIOR_RESULT_FAILED";
    case BehaviorResult.BEHAVIOR_RESULT_CANCELED:
      return "BEHAVIOR_RESULT_CANCELED";
    case BehaviorResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CompletedBehavior {
  result: BehaviorResult;
  request: BehaviorRequest | undefined;
}

export interface CompletedBehaviors {
  /** Behavior Request ID <-> Completed Behavior */
  completedBehaviors: { [key: string]: CompletedBehavior };
}

export interface CompletedBehaviors_CompletedBehaviorsEntry {
  key: string;
  value: CompletedBehavior | undefined;
}

function createBaseCompletedBehavior(): CompletedBehavior {
  return { result: 0, request: undefined };
}

export const CompletedBehavior: MessageFns<CompletedBehavior> = {
  encode(message: CompletedBehavior, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    if (message.request !== undefined) {
      BehaviorRequest.encode(message.request, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompletedBehavior {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompletedBehavior();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.request = BehaviorRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompletedBehavior {
    return {
      result: isSet(object.result) ? behaviorResultFromJSON(object.result) : 0,
      request: isSet(object.request) ? BehaviorRequest.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: CompletedBehavior): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = behaviorResultToJSON(message.result);
    }
    if (message.request !== undefined) {
      obj.request = BehaviorRequest.toJSON(message.request);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompletedBehavior>, I>>(base?: I): CompletedBehavior {
    return CompletedBehavior.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompletedBehavior>, I>>(object: I): CompletedBehavior {
    const message = createBaseCompletedBehavior();
    message.result = object.result ?? 0;
    message.request = (object.request !== undefined && object.request !== null)
      ? BehaviorRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseCompletedBehaviors(): CompletedBehaviors {
  return { completedBehaviors: {} };
}

export const CompletedBehaviors: MessageFns<CompletedBehaviors> = {
  encode(message: CompletedBehaviors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.completedBehaviors).forEach(([key, value]) => {
      CompletedBehaviors_CompletedBehaviorsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompletedBehaviors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompletedBehaviors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = CompletedBehaviors_CompletedBehaviorsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.completedBehaviors[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompletedBehaviors {
    return {
      completedBehaviors: isObject(object.completedBehaviors)
        ? Object.entries(object.completedBehaviors).reduce<{ [key: string]: CompletedBehavior }>(
          (acc, [key, value]) => {
            acc[key] = CompletedBehavior.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: CompletedBehaviors): unknown {
    const obj: any = {};
    if (message.completedBehaviors) {
      const entries = Object.entries(message.completedBehaviors);
      if (entries.length > 0) {
        obj.completedBehaviors = {};
        entries.forEach(([k, v]) => {
          obj.completedBehaviors[k] = CompletedBehavior.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompletedBehaviors>, I>>(base?: I): CompletedBehaviors {
    return CompletedBehaviors.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompletedBehaviors>, I>>(object: I): CompletedBehaviors {
    const message = createBaseCompletedBehaviors();
    message.completedBehaviors = Object.entries(object.completedBehaviors ?? {}).reduce<
      { [key: string]: CompletedBehavior }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = CompletedBehavior.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseCompletedBehaviors_CompletedBehaviorsEntry(): CompletedBehaviors_CompletedBehaviorsEntry {
  return { key: "", value: undefined };
}

export const CompletedBehaviors_CompletedBehaviorsEntry: MessageFns<CompletedBehaviors_CompletedBehaviorsEntry> = {
  encode(message: CompletedBehaviors_CompletedBehaviorsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      CompletedBehavior.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompletedBehaviors_CompletedBehaviorsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompletedBehaviors_CompletedBehaviorsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = CompletedBehavior.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompletedBehaviors_CompletedBehaviorsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? CompletedBehavior.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CompletedBehaviors_CompletedBehaviorsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = CompletedBehavior.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompletedBehaviors_CompletedBehaviorsEntry>, I>>(
    base?: I,
  ): CompletedBehaviors_CompletedBehaviorsEntry {
    return CompletedBehaviors_CompletedBehaviorsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompletedBehaviors_CompletedBehaviorsEntry>, I>>(
    object: I,
  ): CompletedBehaviors_CompletedBehaviorsEntry {
    const message = createBaseCompletedBehaviors_CompletedBehaviorsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? CompletedBehavior.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
