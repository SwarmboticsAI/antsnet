// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_protos/payload_identity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_protos";

export enum PayloadType {
  PAYLOAD_TYPE_UNSPECIFIED = 0,
  PAYLOAD_TYPE_SENSOR = 1,
  PAYLOAD_TYPE_SUPPLY = 2,
  PAYLOAD_TYPE_KINETIC = 3,
  PAYLOAD_TYPE_COMMUNICATION = 4,
  PAYLOAD_TYPE_ELECTRONIC_WARFARE = 5,
  PAYLOAD_TYPE_ISR = 6,
  PAYLOAD_TYPE_UTILITY = 7,
  PAYLOAD_TYPE_OTHER = 8,
  UNRECOGNIZED = -1,
}

export function payloadTypeFromJSON(object: any): PayloadType {
  switch (object) {
    case 0:
    case "PAYLOAD_TYPE_UNSPECIFIED":
      return PayloadType.PAYLOAD_TYPE_UNSPECIFIED;
    case 1:
    case "PAYLOAD_TYPE_SENSOR":
      return PayloadType.PAYLOAD_TYPE_SENSOR;
    case 2:
    case "PAYLOAD_TYPE_SUPPLY":
      return PayloadType.PAYLOAD_TYPE_SUPPLY;
    case 3:
    case "PAYLOAD_TYPE_KINETIC":
      return PayloadType.PAYLOAD_TYPE_KINETIC;
    case 4:
    case "PAYLOAD_TYPE_COMMUNICATION":
      return PayloadType.PAYLOAD_TYPE_COMMUNICATION;
    case 5:
    case "PAYLOAD_TYPE_ELECTRONIC_WARFARE":
      return PayloadType.PAYLOAD_TYPE_ELECTRONIC_WARFARE;
    case 6:
    case "PAYLOAD_TYPE_ISR":
      return PayloadType.PAYLOAD_TYPE_ISR;
    case 7:
    case "PAYLOAD_TYPE_UTILITY":
      return PayloadType.PAYLOAD_TYPE_UTILITY;
    case 8:
    case "PAYLOAD_TYPE_OTHER":
      return PayloadType.PAYLOAD_TYPE_OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PayloadType.UNRECOGNIZED;
  }
}

export function payloadTypeToJSON(object: PayloadType): string {
  switch (object) {
    case PayloadType.PAYLOAD_TYPE_UNSPECIFIED:
      return "PAYLOAD_TYPE_UNSPECIFIED";
    case PayloadType.PAYLOAD_TYPE_SENSOR:
      return "PAYLOAD_TYPE_SENSOR";
    case PayloadType.PAYLOAD_TYPE_SUPPLY:
      return "PAYLOAD_TYPE_SUPPLY";
    case PayloadType.PAYLOAD_TYPE_KINETIC:
      return "PAYLOAD_TYPE_KINETIC";
    case PayloadType.PAYLOAD_TYPE_COMMUNICATION:
      return "PAYLOAD_TYPE_COMMUNICATION";
    case PayloadType.PAYLOAD_TYPE_ELECTRONIC_WARFARE:
      return "PAYLOAD_TYPE_ELECTRONIC_WARFARE";
    case PayloadType.PAYLOAD_TYPE_ISR:
      return "PAYLOAD_TYPE_ISR";
    case PayloadType.PAYLOAD_TYPE_UTILITY:
      return "PAYLOAD_TYPE_UTILITY";
    case PayloadType.PAYLOAD_TYPE_OTHER:
      return "PAYLOAD_TYPE_OTHER";
    case PayloadType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PayloadIdentity {
  description: string;
  type: PayloadType;
}

function createBasePayloadIdentity(): PayloadIdentity {
  return { description: "", type: 0 };
}

export const PayloadIdentity: MessageFns<PayloadIdentity> = {
  encode(message: PayloadIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PayloadIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayloadIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PayloadIdentity {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      type: isSet(object.type) ? payloadTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: PayloadIdentity): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.type !== 0) {
      obj.type = payloadTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PayloadIdentity>, I>>(base?: I): PayloadIdentity {
    return PayloadIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PayloadIdentity>, I>>(object: I): PayloadIdentity {
    const message = createBasePayloadIdentity();
    message.description = object.description ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
