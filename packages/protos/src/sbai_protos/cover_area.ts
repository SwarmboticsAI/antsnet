// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_protos/cover_area.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GeoPoint } from "./geo_point";
import { RequestHeader } from "./request_header";

export const protobufPackage = "sbai_protos";

export interface CoverAreaRequest {
  header: RequestHeader | undefined;
  behaviorRequestId: string;
  participatingRobotIds: string[];
  coverageArea: GeoPoint[];
  laneWidthM: number;
}

export interface CoverAreaResponse {
  queuedSuccessfully: boolean;
}

function createBaseCoverAreaRequest(): CoverAreaRequest {
  return { header: undefined, behaviorRequestId: "", participatingRobotIds: [], coverageArea: [], laneWidthM: 0 };
}

export const CoverAreaRequest: MessageFns<CoverAreaRequest> = {
  encode(message: CoverAreaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      RequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.behaviorRequestId !== "") {
      writer.uint32(18).string(message.behaviorRequestId);
    }
    for (const v of message.participatingRobotIds) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.coverageArea) {
      GeoPoint.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.laneWidthM !== 0) {
      writer.uint32(45).float(message.laneWidthM);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CoverAreaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCoverAreaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = RequestHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.behaviorRequestId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.participatingRobotIds.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coverageArea.push(GeoPoint.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.laneWidthM = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CoverAreaRequest {
    return {
      header: isSet(object.header) ? RequestHeader.fromJSON(object.header) : undefined,
      behaviorRequestId: isSet(object.behaviorRequestId) ? globalThis.String(object.behaviorRequestId) : "",
      participatingRobotIds: globalThis.Array.isArray(object?.participatingRobotIds)
        ? object.participatingRobotIds.map((e: any) => globalThis.String(e))
        : [],
      coverageArea: globalThis.Array.isArray(object?.coverageArea)
        ? object.coverageArea.map((e: any) => GeoPoint.fromJSON(e))
        : [],
      laneWidthM: isSet(object.laneWidthM) ? globalThis.Number(object.laneWidthM) : 0,
    };
  },

  toJSON(message: CoverAreaRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = RequestHeader.toJSON(message.header);
    }
    if (message.behaviorRequestId !== "") {
      obj.behaviorRequestId = message.behaviorRequestId;
    }
    if (message.participatingRobotIds?.length) {
      obj.participatingRobotIds = message.participatingRobotIds;
    }
    if (message.coverageArea?.length) {
      obj.coverageArea = message.coverageArea.map((e) => GeoPoint.toJSON(e));
    }
    if (message.laneWidthM !== 0) {
      obj.laneWidthM = message.laneWidthM;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CoverAreaRequest>, I>>(base?: I): CoverAreaRequest {
    return CoverAreaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CoverAreaRequest>, I>>(object: I): CoverAreaRequest {
    const message = createBaseCoverAreaRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? RequestHeader.fromPartial(object.header)
      : undefined;
    message.behaviorRequestId = object.behaviorRequestId ?? "";
    message.participatingRobotIds = object.participatingRobotIds?.map((e) => e) || [];
    message.coverageArea = object.coverageArea?.map((e) => GeoPoint.fromPartial(e)) || [];
    message.laneWidthM = object.laneWidthM ?? 0;
    return message;
  },
};

function createBaseCoverAreaResponse(): CoverAreaResponse {
  return { queuedSuccessfully: false };
}

export const CoverAreaResponse: MessageFns<CoverAreaResponse> = {
  encode(message: CoverAreaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queuedSuccessfully !== false) {
      writer.uint32(8).bool(message.queuedSuccessfully);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CoverAreaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCoverAreaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.queuedSuccessfully = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CoverAreaResponse {
    return {
      queuedSuccessfully: isSet(object.queuedSuccessfully) ? globalThis.Boolean(object.queuedSuccessfully) : false,
    };
  },

  toJSON(message: CoverAreaResponse): unknown {
    const obj: any = {};
    if (message.queuedSuccessfully !== false) {
      obj.queuedSuccessfully = message.queuedSuccessfully;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CoverAreaResponse>, I>>(base?: I): CoverAreaResponse {
    return CoverAreaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CoverAreaResponse>, I>>(object: I): CoverAreaResponse {
    const message = createBaseCoverAreaResponse();
    message.queuedSuccessfully = object.queuedSuccessfully ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
