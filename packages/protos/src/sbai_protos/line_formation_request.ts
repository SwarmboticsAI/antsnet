// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_protos/line_formation_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GeoPoint } from "./geo_point";

export const protobufPackage = "sbai_protos";

export interface LineFormationRequest {
  behaviorRequestId: string;
  participatingRobotIds: string[];
  geoPoint: GeoPoint | undefined;
  separationDistanceM: number;
  /** 0 degrees is due East; counter-clockwise */
  lineYawDeg: number;
  /** Angle of robots in relation to the line */
  robotYawDeg: number;
}

function createBaseLineFormationRequest(): LineFormationRequest {
  return {
    behaviorRequestId: "",
    participatingRobotIds: [],
    geoPoint: undefined,
    separationDistanceM: 0,
    lineYawDeg: 0,
    robotYawDeg: 0,
  };
}

export const LineFormationRequest: MessageFns<LineFormationRequest> = {
  encode(message: LineFormationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.behaviorRequestId !== "") {
      writer.uint32(10).string(message.behaviorRequestId);
    }
    for (const v of message.participatingRobotIds) {
      writer.uint32(18).string(v!);
    }
    if (message.geoPoint !== undefined) {
      GeoPoint.encode(message.geoPoint, writer.uint32(26).fork()).join();
    }
    if (message.separationDistanceM !== 0) {
      writer.uint32(37).float(message.separationDistanceM);
    }
    if (message.lineYawDeg !== 0) {
      writer.uint32(45).float(message.lineYawDeg);
    }
    if (message.robotYawDeg !== 0) {
      writer.uint32(53).float(message.robotYawDeg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LineFormationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLineFormationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.behaviorRequestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participatingRobotIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.geoPoint = GeoPoint.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.separationDistanceM = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.lineYawDeg = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.robotYawDeg = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LineFormationRequest {
    return {
      behaviorRequestId: isSet(object.behaviorRequestId) ? globalThis.String(object.behaviorRequestId) : "",
      participatingRobotIds: globalThis.Array.isArray(object?.participatingRobotIds)
        ? object.participatingRobotIds.map((e: any) => globalThis.String(e))
        : [],
      geoPoint: isSet(object.geoPoint) ? GeoPoint.fromJSON(object.geoPoint) : undefined,
      separationDistanceM: isSet(object.separationDistanceM) ? globalThis.Number(object.separationDistanceM) : 0,
      lineYawDeg: isSet(object.lineYawDeg) ? globalThis.Number(object.lineYawDeg) : 0,
      robotYawDeg: isSet(object.robotYawDeg) ? globalThis.Number(object.robotYawDeg) : 0,
    };
  },

  toJSON(message: LineFormationRequest): unknown {
    const obj: any = {};
    if (message.behaviorRequestId !== "") {
      obj.behaviorRequestId = message.behaviorRequestId;
    }
    if (message.participatingRobotIds?.length) {
      obj.participatingRobotIds = message.participatingRobotIds;
    }
    if (message.geoPoint !== undefined) {
      obj.geoPoint = GeoPoint.toJSON(message.geoPoint);
    }
    if (message.separationDistanceM !== 0) {
      obj.separationDistanceM = message.separationDistanceM;
    }
    if (message.lineYawDeg !== 0) {
      obj.lineYawDeg = message.lineYawDeg;
    }
    if (message.robotYawDeg !== 0) {
      obj.robotYawDeg = message.robotYawDeg;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LineFormationRequest>, I>>(base?: I): LineFormationRequest {
    return LineFormationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LineFormationRequest>, I>>(object: I): LineFormationRequest {
    const message = createBaseLineFormationRequest();
    message.behaviorRequestId = object.behaviorRequestId ?? "";
    message.participatingRobotIds = object.participatingRobotIds?.map((e) => e) || [];
    message.geoPoint = (object.geoPoint !== undefined && object.geoPoint !== null)
      ? GeoPoint.fromPartial(object.geoPoint)
      : undefined;
    message.separationDistanceM = object.separationDistanceM ?? 0;
    message.lineYawDeg = object.lineYawDeg ?? 0;
    message.robotYawDeg = object.robotYawDeg ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
