// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_protos/direct_control.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Joystick } from "./joystick";
import { RequestHeader } from "./request_header";

export const protobufPackage = "sbai_protos";

export interface StartDirectControlSessionRequest {
  header: RequestHeader | undefined;
  controllingDeviceId: string;
  controllingDeviceIp: string;
}

export interface StartDirectControlSessionResponse {
  accepted: boolean;
  rejectionReason: string;
  directControlToken?: string | undefined;
}

export interface StopDirectControlSessionRequest {
  header: RequestHeader | undefined;
  controllingDeviceId: string;
  directControlToken: string;
}

export interface StopDirectControlSessionResponse {
  accepted: boolean;
  rejectionReason: string;
  directControlToken?: string | undefined;
}

export interface DirectControlCommandStreamRequest {
  header: RequestHeader | undefined;
  directControlToken: string;
  joystick: Joystick | undefined;
}

export interface DirectControlCommandStreamResponse {
  success: boolean;
}

function createBaseStartDirectControlSessionRequest(): StartDirectControlSessionRequest {
  return { header: undefined, controllingDeviceId: "", controllingDeviceIp: "" };
}

export const StartDirectControlSessionRequest: MessageFns<StartDirectControlSessionRequest> = {
  encode(message: StartDirectControlSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      RequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.controllingDeviceId !== "") {
      writer.uint32(18).string(message.controllingDeviceId);
    }
    if (message.controllingDeviceIp !== "") {
      writer.uint32(26).string(message.controllingDeviceIp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartDirectControlSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartDirectControlSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = RequestHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.controllingDeviceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.controllingDeviceIp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartDirectControlSessionRequest {
    return {
      header: isSet(object.header) ? RequestHeader.fromJSON(object.header) : undefined,
      controllingDeviceId: isSet(object.controllingDeviceId) ? globalThis.String(object.controllingDeviceId) : "",
      controllingDeviceIp: isSet(object.controllingDeviceIp) ? globalThis.String(object.controllingDeviceIp) : "",
    };
  },

  toJSON(message: StartDirectControlSessionRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = RequestHeader.toJSON(message.header);
    }
    if (message.controllingDeviceId !== "") {
      obj.controllingDeviceId = message.controllingDeviceId;
    }
    if (message.controllingDeviceIp !== "") {
      obj.controllingDeviceIp = message.controllingDeviceIp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartDirectControlSessionRequest>, I>>(
    base?: I,
  ): StartDirectControlSessionRequest {
    return StartDirectControlSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartDirectControlSessionRequest>, I>>(
    object: I,
  ): StartDirectControlSessionRequest {
    const message = createBaseStartDirectControlSessionRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? RequestHeader.fromPartial(object.header)
      : undefined;
    message.controllingDeviceId = object.controllingDeviceId ?? "";
    message.controllingDeviceIp = object.controllingDeviceIp ?? "";
    return message;
  },
};

function createBaseStartDirectControlSessionResponse(): StartDirectControlSessionResponse {
  return { accepted: false, rejectionReason: "", directControlToken: undefined };
}

export const StartDirectControlSessionResponse: MessageFns<StartDirectControlSessionResponse> = {
  encode(message: StartDirectControlSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accepted !== false) {
      writer.uint32(8).bool(message.accepted);
    }
    if (message.rejectionReason !== "") {
      writer.uint32(18).string(message.rejectionReason);
    }
    if (message.directControlToken !== undefined) {
      writer.uint32(26).string(message.directControlToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartDirectControlSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartDirectControlSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rejectionReason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.directControlToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartDirectControlSessionResponse {
    return {
      accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false,
      rejectionReason: isSet(object.rejectionReason) ? globalThis.String(object.rejectionReason) : "",
      directControlToken: isSet(object.directControlToken) ? globalThis.String(object.directControlToken) : undefined,
    };
  },

  toJSON(message: StartDirectControlSessionResponse): unknown {
    const obj: any = {};
    if (message.accepted !== false) {
      obj.accepted = message.accepted;
    }
    if (message.rejectionReason !== "") {
      obj.rejectionReason = message.rejectionReason;
    }
    if (message.directControlToken !== undefined) {
      obj.directControlToken = message.directControlToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartDirectControlSessionResponse>, I>>(
    base?: I,
  ): StartDirectControlSessionResponse {
    return StartDirectControlSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartDirectControlSessionResponse>, I>>(
    object: I,
  ): StartDirectControlSessionResponse {
    const message = createBaseStartDirectControlSessionResponse();
    message.accepted = object.accepted ?? false;
    message.rejectionReason = object.rejectionReason ?? "";
    message.directControlToken = object.directControlToken ?? undefined;
    return message;
  },
};

function createBaseStopDirectControlSessionRequest(): StopDirectControlSessionRequest {
  return { header: undefined, controllingDeviceId: "", directControlToken: "" };
}

export const StopDirectControlSessionRequest: MessageFns<StopDirectControlSessionRequest> = {
  encode(message: StopDirectControlSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      RequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.controllingDeviceId !== "") {
      writer.uint32(18).string(message.controllingDeviceId);
    }
    if (message.directControlToken !== "") {
      writer.uint32(26).string(message.directControlToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopDirectControlSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopDirectControlSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = RequestHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.controllingDeviceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.directControlToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopDirectControlSessionRequest {
    return {
      header: isSet(object.header) ? RequestHeader.fromJSON(object.header) : undefined,
      controllingDeviceId: isSet(object.controllingDeviceId) ? globalThis.String(object.controllingDeviceId) : "",
      directControlToken: isSet(object.directControlToken) ? globalThis.String(object.directControlToken) : "",
    };
  },

  toJSON(message: StopDirectControlSessionRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = RequestHeader.toJSON(message.header);
    }
    if (message.controllingDeviceId !== "") {
      obj.controllingDeviceId = message.controllingDeviceId;
    }
    if (message.directControlToken !== "") {
      obj.directControlToken = message.directControlToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StopDirectControlSessionRequest>, I>>(base?: I): StopDirectControlSessionRequest {
    return StopDirectControlSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopDirectControlSessionRequest>, I>>(
    object: I,
  ): StopDirectControlSessionRequest {
    const message = createBaseStopDirectControlSessionRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? RequestHeader.fromPartial(object.header)
      : undefined;
    message.controllingDeviceId = object.controllingDeviceId ?? "";
    message.directControlToken = object.directControlToken ?? "";
    return message;
  },
};

function createBaseStopDirectControlSessionResponse(): StopDirectControlSessionResponse {
  return { accepted: false, rejectionReason: "", directControlToken: undefined };
}

export const StopDirectControlSessionResponse: MessageFns<StopDirectControlSessionResponse> = {
  encode(message: StopDirectControlSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accepted !== false) {
      writer.uint32(8).bool(message.accepted);
    }
    if (message.rejectionReason !== "") {
      writer.uint32(18).string(message.rejectionReason);
    }
    if (message.directControlToken !== undefined) {
      writer.uint32(26).string(message.directControlToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopDirectControlSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopDirectControlSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rejectionReason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.directControlToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopDirectControlSessionResponse {
    return {
      accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false,
      rejectionReason: isSet(object.rejectionReason) ? globalThis.String(object.rejectionReason) : "",
      directControlToken: isSet(object.directControlToken) ? globalThis.String(object.directControlToken) : undefined,
    };
  },

  toJSON(message: StopDirectControlSessionResponse): unknown {
    const obj: any = {};
    if (message.accepted !== false) {
      obj.accepted = message.accepted;
    }
    if (message.rejectionReason !== "") {
      obj.rejectionReason = message.rejectionReason;
    }
    if (message.directControlToken !== undefined) {
      obj.directControlToken = message.directControlToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StopDirectControlSessionResponse>, I>>(
    base?: I,
  ): StopDirectControlSessionResponse {
    return StopDirectControlSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopDirectControlSessionResponse>, I>>(
    object: I,
  ): StopDirectControlSessionResponse {
    const message = createBaseStopDirectControlSessionResponse();
    message.accepted = object.accepted ?? false;
    message.rejectionReason = object.rejectionReason ?? "";
    message.directControlToken = object.directControlToken ?? undefined;
    return message;
  },
};

function createBaseDirectControlCommandStreamRequest(): DirectControlCommandStreamRequest {
  return { header: undefined, directControlToken: "", joystick: undefined };
}

export const DirectControlCommandStreamRequest: MessageFns<DirectControlCommandStreamRequest> = {
  encode(message: DirectControlCommandStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      RequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.directControlToken !== "") {
      writer.uint32(18).string(message.directControlToken);
    }
    if (message.joystick !== undefined) {
      Joystick.encode(message.joystick, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectControlCommandStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectControlCommandStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = RequestHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.directControlToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.joystick = Joystick.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DirectControlCommandStreamRequest {
    return {
      header: isSet(object.header) ? RequestHeader.fromJSON(object.header) : undefined,
      directControlToken: isSet(object.directControlToken) ? globalThis.String(object.directControlToken) : "",
      joystick: isSet(object.joystick) ? Joystick.fromJSON(object.joystick) : undefined,
    };
  },

  toJSON(message: DirectControlCommandStreamRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = RequestHeader.toJSON(message.header);
    }
    if (message.directControlToken !== "") {
      obj.directControlToken = message.directControlToken;
    }
    if (message.joystick !== undefined) {
      obj.joystick = Joystick.toJSON(message.joystick);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DirectControlCommandStreamRequest>, I>>(
    base?: I,
  ): DirectControlCommandStreamRequest {
    return DirectControlCommandStreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DirectControlCommandStreamRequest>, I>>(
    object: I,
  ): DirectControlCommandStreamRequest {
    const message = createBaseDirectControlCommandStreamRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? RequestHeader.fromPartial(object.header)
      : undefined;
    message.directControlToken = object.directControlToken ?? "";
    message.joystick = (object.joystick !== undefined && object.joystick !== null)
      ? Joystick.fromPartial(object.joystick)
      : undefined;
    return message;
  },
};

function createBaseDirectControlCommandStreamResponse(): DirectControlCommandStreamResponse {
  return { success: false };
}

export const DirectControlCommandStreamResponse: MessageFns<DirectControlCommandStreamResponse> = {
  encode(message: DirectControlCommandStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectControlCommandStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectControlCommandStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DirectControlCommandStreamResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DirectControlCommandStreamResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DirectControlCommandStreamResponse>, I>>(
    base?: I,
  ): DirectControlCommandStreamResponse {
    return DirectControlCommandStreamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DirectControlCommandStreamResponse>, I>>(
    object: I,
  ): DirectControlCommandStreamResponse {
    const message = createBaseDirectControlCommandStreamResponse();
    message.success = object.success ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
