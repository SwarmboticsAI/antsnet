// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_protos/active_behavior_states.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BehaviorRequest } from "./behavior_request";

export const protobufPackage = "sbai_protos";

export enum ActiveBehaviorStatus {
  ACTIVE_BEHAVIOR_STATUS_UNSPECIFIED = 0,
  ACTIVE_BEHAVIOR_STATUS_RUNNING = 1,
  ACTIVE_BEHAVIOR_STATUS_PAUSED = 2,
  ACTIVE_BEHAVIOR_STATUS_PAUSED_NEEDS_INTERVENTION = 3,
  UNRECOGNIZED = -1,
}

export function activeBehaviorStatusFromJSON(object: any): ActiveBehaviorStatus {
  switch (object) {
    case 0:
    case "ACTIVE_BEHAVIOR_STATUS_UNSPECIFIED":
      return ActiveBehaviorStatus.ACTIVE_BEHAVIOR_STATUS_UNSPECIFIED;
    case 1:
    case "ACTIVE_BEHAVIOR_STATUS_RUNNING":
      return ActiveBehaviorStatus.ACTIVE_BEHAVIOR_STATUS_RUNNING;
    case 2:
    case "ACTIVE_BEHAVIOR_STATUS_PAUSED":
      return ActiveBehaviorStatus.ACTIVE_BEHAVIOR_STATUS_PAUSED;
    case 3:
    case "ACTIVE_BEHAVIOR_STATUS_PAUSED_NEEDS_INTERVENTION":
      return ActiveBehaviorStatus.ACTIVE_BEHAVIOR_STATUS_PAUSED_NEEDS_INTERVENTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActiveBehaviorStatus.UNRECOGNIZED;
  }
}

export function activeBehaviorStatusToJSON(object: ActiveBehaviorStatus): string {
  switch (object) {
    case ActiveBehaviorStatus.ACTIVE_BEHAVIOR_STATUS_UNSPECIFIED:
      return "ACTIVE_BEHAVIOR_STATUS_UNSPECIFIED";
    case ActiveBehaviorStatus.ACTIVE_BEHAVIOR_STATUS_RUNNING:
      return "ACTIVE_BEHAVIOR_STATUS_RUNNING";
    case ActiveBehaviorStatus.ACTIVE_BEHAVIOR_STATUS_PAUSED:
      return "ACTIVE_BEHAVIOR_STATUS_PAUSED";
    case ActiveBehaviorStatus.ACTIVE_BEHAVIOR_STATUS_PAUSED_NEEDS_INTERVENTION:
      return "ACTIVE_BEHAVIOR_STATUS_PAUSED_NEEDS_INTERVENTION";
    case ActiveBehaviorStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActiveBehaviorState {
  status: ActiveBehaviorStatus;
  activeBehavior: BehaviorRequest | undefined;
}

export interface ActiveBehaviorStates {
  states: { [key: string]: ActiveBehaviorState };
}

export interface ActiveBehaviorStates_StatesEntry {
  key: string;
  value: ActiveBehaviorState | undefined;
}

function createBaseActiveBehaviorState(): ActiveBehaviorState {
  return { status: 0, activeBehavior: undefined };
}

export const ActiveBehaviorState: MessageFns<ActiveBehaviorState> = {
  encode(message: ActiveBehaviorState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.activeBehavior !== undefined) {
      BehaviorRequest.encode(message.activeBehavior, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveBehaviorState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveBehaviorState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.activeBehavior = BehaviorRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveBehaviorState {
    return {
      status: isSet(object.status) ? activeBehaviorStatusFromJSON(object.status) : 0,
      activeBehavior: isSet(object.activeBehavior) ? BehaviorRequest.fromJSON(object.activeBehavior) : undefined,
    };
  },

  toJSON(message: ActiveBehaviorState): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = activeBehaviorStatusToJSON(message.status);
    }
    if (message.activeBehavior !== undefined) {
      obj.activeBehavior = BehaviorRequest.toJSON(message.activeBehavior);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveBehaviorState>, I>>(base?: I): ActiveBehaviorState {
    return ActiveBehaviorState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveBehaviorState>, I>>(object: I): ActiveBehaviorState {
    const message = createBaseActiveBehaviorState();
    message.status = object.status ?? 0;
    message.activeBehavior = (object.activeBehavior !== undefined && object.activeBehavior !== null)
      ? BehaviorRequest.fromPartial(object.activeBehavior)
      : undefined;
    return message;
  },
};

function createBaseActiveBehaviorStates(): ActiveBehaviorStates {
  return { states: {} };
}

export const ActiveBehaviorStates: MessageFns<ActiveBehaviorStates> = {
  encode(message: ActiveBehaviorStates, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.states).forEach(([key, value]) => {
      ActiveBehaviorStates_StatesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveBehaviorStates {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveBehaviorStates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ActiveBehaviorStates_StatesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.states[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveBehaviorStates {
    return {
      states: isObject(object.states)
        ? Object.entries(object.states).reduce<{ [key: string]: ActiveBehaviorState }>((acc, [key, value]) => {
          acc[key] = ActiveBehaviorState.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ActiveBehaviorStates): unknown {
    const obj: any = {};
    if (message.states) {
      const entries = Object.entries(message.states);
      if (entries.length > 0) {
        obj.states = {};
        entries.forEach(([k, v]) => {
          obj.states[k] = ActiveBehaviorState.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveBehaviorStates>, I>>(base?: I): ActiveBehaviorStates {
    return ActiveBehaviorStates.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveBehaviorStates>, I>>(object: I): ActiveBehaviorStates {
    const message = createBaseActiveBehaviorStates();
    message.states = Object.entries(object.states ?? {}).reduce<{ [key: string]: ActiveBehaviorState }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ActiveBehaviorState.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseActiveBehaviorStates_StatesEntry(): ActiveBehaviorStates_StatesEntry {
  return { key: "", value: undefined };
}

export const ActiveBehaviorStates_StatesEntry: MessageFns<ActiveBehaviorStates_StatesEntry> = {
  encode(message: ActiveBehaviorStates_StatesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ActiveBehaviorState.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveBehaviorStates_StatesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveBehaviorStates_StatesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ActiveBehaviorState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveBehaviorStates_StatesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ActiveBehaviorState.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ActiveBehaviorStates_StatesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ActiveBehaviorState.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveBehaviorStates_StatesEntry>, I>>(
    base?: I,
  ): ActiveBehaviorStates_StatesEntry {
    return ActiveBehaviorStates_StatesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveBehaviorStates_StatesEntry>, I>>(
    object: I,
  ): ActiveBehaviorStates_StatesEntry {
    const message = createBaseActiveBehaviorStates_StatesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ActiveBehaviorState.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
