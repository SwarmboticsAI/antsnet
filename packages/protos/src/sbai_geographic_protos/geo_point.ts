// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_geographic_protos/geo_point.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_geographic_protos";

export interface GeoPoint {
  /**
   * Latitude [degrees]. Positive is north of equator; negative is south
   * (-90.0 <= latitude <= +90.0).
   */
  latitude: number;
  /**
   * Longitude [degrees]. Positive is east of prime meridian; negative is
   * west (-180.0 <= longitude <= +180.0). At the poles, latitude is -90.0 or
   * +90.0, and longitude is irrelevant, but must be in range.
   */
  longitude: number;
  /** Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified). */
  altitude: number;
}

function createBaseGeoPoint(): GeoPoint {
  return { latitude: 0, longitude: 0, altitude: 0 };
}

export const GeoPoint: MessageFns<GeoPoint> = {
  encode(message: GeoPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latitude !== 0) {
      writer.uint32(9).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(17).double(message.longitude);
    }
    if (message.altitude !== 0) {
      writer.uint32(25).double(message.altitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GeoPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeoPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.altitude = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GeoPoint {
    return {
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      altitude: isSet(object.altitude) ? globalThis.Number(object.altitude) : 0,
    };
  },

  toJSON(message: GeoPoint): unknown {
    const obj: any = {};
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.altitude !== 0) {
      obj.altitude = message.altitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GeoPoint>, I>>(base?: I): GeoPoint {
    return GeoPoint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GeoPoint>, I>>(object: I): GeoPoint {
    const message = createBaseGeoPoint();
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.altitude = object.altitude ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
