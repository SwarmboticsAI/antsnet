// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_task_assignment_protos/cbba_consensus_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UpdateIteration } from "./update_iteration";
import { WinningAgent } from "./winning_agent";
import { WinningBid } from "./winning_bid";

export const protobufPackage = "sbai_task_assignment_protos";

export interface CBBAConsensusData {
  winningBidsList: WinningBid[];
  winningAgentsList: WinningAgent[];
  timeStampList: UpdateIteration[];
  believesConverged: boolean;
  behaviorRequestId: string;
}

function createBaseCBBAConsensusData(): CBBAConsensusData {
  return {
    winningBidsList: [],
    winningAgentsList: [],
    timeStampList: [],
    believesConverged: false,
    behaviorRequestId: "",
  };
}

export const CBBAConsensusData: MessageFns<CBBAConsensusData> = {
  encode(message: CBBAConsensusData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.winningBidsList) {
      WinningBid.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.winningAgentsList) {
      WinningAgent.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.timeStampList) {
      UpdateIteration.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.believesConverged !== false) {
      writer.uint32(32).bool(message.believesConverged);
    }
    if (message.behaviorRequestId !== "") {
      writer.uint32(42).string(message.behaviorRequestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CBBAConsensusData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCBBAConsensusData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.winningBidsList.push(WinningBid.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.winningAgentsList.push(WinningAgent.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timeStampList.push(UpdateIteration.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.believesConverged = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.behaviorRequestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CBBAConsensusData {
    return {
      winningBidsList: globalThis.Array.isArray(object?.winningBidsList)
        ? object.winningBidsList.map((e: any) => WinningBid.fromJSON(e))
        : [],
      winningAgentsList: globalThis.Array.isArray(object?.winningAgentsList)
        ? object.winningAgentsList.map((e: any) => WinningAgent.fromJSON(e))
        : [],
      timeStampList: globalThis.Array.isArray(object?.timeStampList)
        ? object.timeStampList.map((e: any) => UpdateIteration.fromJSON(e))
        : [],
      believesConverged: isSet(object.believesConverged) ? globalThis.Boolean(object.believesConverged) : false,
      behaviorRequestId: isSet(object.behaviorRequestId) ? globalThis.String(object.behaviorRequestId) : "",
    };
  },

  toJSON(message: CBBAConsensusData): unknown {
    const obj: any = {};
    if (message.winningBidsList?.length) {
      obj.winningBidsList = message.winningBidsList.map((e) => WinningBid.toJSON(e));
    }
    if (message.winningAgentsList?.length) {
      obj.winningAgentsList = message.winningAgentsList.map((e) => WinningAgent.toJSON(e));
    }
    if (message.timeStampList?.length) {
      obj.timeStampList = message.timeStampList.map((e) => UpdateIteration.toJSON(e));
    }
    if (message.believesConverged !== false) {
      obj.believesConverged = message.believesConverged;
    }
    if (message.behaviorRequestId !== "") {
      obj.behaviorRequestId = message.behaviorRequestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CBBAConsensusData>, I>>(base?: I): CBBAConsensusData {
    return CBBAConsensusData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CBBAConsensusData>, I>>(object: I): CBBAConsensusData {
    const message = createBaseCBBAConsensusData();
    message.winningBidsList = object.winningBidsList?.map((e) => WinningBid.fromPartial(e)) || [];
    message.winningAgentsList = object.winningAgentsList?.map((e) => WinningAgent.fromPartial(e)) || [];
    message.timeStampList = object.timeStampList?.map((e) => UpdateIteration.fromPartial(e)) || [];
    message.believesConverged = object.believesConverged ?? false;
    message.behaviorRequestId = object.behaviorRequestId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
