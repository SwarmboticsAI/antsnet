// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: sbai_sensor_protos/joy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Header } from "../sbai_std_protos/header";

export const protobufPackage = "sbai_sensor_protos";

/** Reports the state of a joystick's axes and buttons. */
export interface Joy {
  /** The timestamp is the time at which data is received from the joystick. */
  header:
    | Header
    | undefined;
  /** The axes measurements from a joystick. */
  axes: number[];
  /** The buttons measurements from a joystick. */
  buttons: number[];
}

function createBaseJoy(): Joy {
  return { header: undefined, axes: [], buttons: [] };
}

export const Joy: MessageFns<Joy> = {
  encode(message: Joy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    writer.uint32(18).fork();
    for (const v of message.axes) {
      writer.float(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.buttons) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Joy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = Header.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag === 21) {
            message.axes.push(reader.float());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.axes.push(reader.float());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.buttons.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.buttons.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Joy {
    return {
      header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,
      axes: globalThis.Array.isArray(object?.axes) ? object.axes.map((e: any) => globalThis.Number(e)) : [],
      buttons: globalThis.Array.isArray(object?.buttons) ? object.buttons.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: Joy): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = Header.toJSON(message.header);
    }
    if (message.axes?.length) {
      obj.axes = message.axes;
    }
    if (message.buttons?.length) {
      obj.buttons = message.buttons.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Joy>, I>>(base?: I): Joy {
    return Joy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Joy>, I>>(object: I): Joy {
    const message = createBaseJoy();
    message.header = (object.header !== undefined && object.header !== null)
      ? Header.fromPartial(object.header)
      : undefined;
    message.axes = object.axes?.map((e) => e) || [];
    message.buttons = object.buttons?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
