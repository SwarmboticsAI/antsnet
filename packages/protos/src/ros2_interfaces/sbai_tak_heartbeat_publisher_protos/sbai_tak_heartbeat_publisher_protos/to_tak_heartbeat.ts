// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_tak_heartbeat_publisher_protos/sbai_tak_heartbeat_publisher_protos/to_tak_heartbeat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CortexStateUpdate } from "../../../sbai_cortex_protos/cortex_state_update";
import { GeoPoint } from "../../../sbai_geographic_protos/geo_point";

export const protobufPackage = "sbai_tak_heartbeat_publisher_protos";

export enum ParkingBrakeState {
  PARKING_BRAKE_STATE_UNSPECIFIED = 0,
  PARKING_BRAKE_STATE_ERROR = 1,
  PARKING_BRAKE_STATE_CALIBRATING = 2,
  PARKING_BRAKE_STATE_IN_PROGRESS = 3,
  PARKING_BRAKE_STATE_ENGAGED = 4,
  PARKING_BRAKE_STATE_DISENGAGED = 5,
  UNRECOGNIZED = -1,
}

export function parkingBrakeStateFromJSON(object: any): ParkingBrakeState {
  switch (object) {
    case 0:
    case "PARKING_BRAKE_STATE_UNSPECIFIED":
      return ParkingBrakeState.PARKING_BRAKE_STATE_UNSPECIFIED;
    case 1:
    case "PARKING_BRAKE_STATE_ERROR":
      return ParkingBrakeState.PARKING_BRAKE_STATE_ERROR;
    case 2:
    case "PARKING_BRAKE_STATE_CALIBRATING":
      return ParkingBrakeState.PARKING_BRAKE_STATE_CALIBRATING;
    case 3:
    case "PARKING_BRAKE_STATE_IN_PROGRESS":
      return ParkingBrakeState.PARKING_BRAKE_STATE_IN_PROGRESS;
    case 4:
    case "PARKING_BRAKE_STATE_ENGAGED":
      return ParkingBrakeState.PARKING_BRAKE_STATE_ENGAGED;
    case 5:
    case "PARKING_BRAKE_STATE_DISENGAGED":
      return ParkingBrakeState.PARKING_BRAKE_STATE_DISENGAGED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParkingBrakeState.UNRECOGNIZED;
  }
}

export function parkingBrakeStateToJSON(object: ParkingBrakeState): string {
  switch (object) {
    case ParkingBrakeState.PARKING_BRAKE_STATE_UNSPECIFIED:
      return "PARKING_BRAKE_STATE_UNSPECIFIED";
    case ParkingBrakeState.PARKING_BRAKE_STATE_ERROR:
      return "PARKING_BRAKE_STATE_ERROR";
    case ParkingBrakeState.PARKING_BRAKE_STATE_CALIBRATING:
      return "PARKING_BRAKE_STATE_CALIBRATING";
    case ParkingBrakeState.PARKING_BRAKE_STATE_IN_PROGRESS:
      return "PARKING_BRAKE_STATE_IN_PROGRESS";
    case ParkingBrakeState.PARKING_BRAKE_STATE_ENGAGED:
      return "PARKING_BRAKE_STATE_ENGAGED";
    case ParkingBrakeState.PARKING_BRAKE_STATE_DISENGAGED:
      return "PARKING_BRAKE_STATE_DISENGAGED";
    case ParkingBrakeState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ToTakHeartbeat {
  robotId: string;
  platformType: string;
  ipAddress: string;
  vpnIpAddress: string;
  state: CortexStateUpdate | undefined;
  gpsCoordinate: GeoPoint | undefined;
  magneticHeadingDeg: number;
  batteryPercentage: number;
  bodySpeedMPerS: number;
  parkingBrakeState: ParkingBrakeState;
  controllingTakId?: string | undefined;
}

function createBaseToTakHeartbeat(): ToTakHeartbeat {
  return {
    robotId: "",
    platformType: "",
    ipAddress: "",
    vpnIpAddress: "",
    state: undefined,
    gpsCoordinate: undefined,
    magneticHeadingDeg: 0,
    batteryPercentage: 0,
    bodySpeedMPerS: 0,
    parkingBrakeState: 0,
    controllingTakId: undefined,
  };
}

export const ToTakHeartbeat: MessageFns<ToTakHeartbeat> = {
  encode(message: ToTakHeartbeat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.robotId !== "") {
      writer.uint32(10).string(message.robotId);
    }
    if (message.platformType !== "") {
      writer.uint32(18).string(message.platformType);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    if (message.vpnIpAddress !== "") {
      writer.uint32(34).string(message.vpnIpAddress);
    }
    if (message.state !== undefined) {
      CortexStateUpdate.encode(message.state, writer.uint32(42).fork()).join();
    }
    if (message.gpsCoordinate !== undefined) {
      GeoPoint.encode(message.gpsCoordinate, writer.uint32(50).fork()).join();
    }
    if (message.magneticHeadingDeg !== 0) {
      writer.uint32(57).double(message.magneticHeadingDeg);
    }
    if (message.batteryPercentage !== 0) {
      writer.uint32(65).double(message.batteryPercentage);
    }
    if (message.bodySpeedMPerS !== 0) {
      writer.uint32(73).double(message.bodySpeedMPerS);
    }
    if (message.parkingBrakeState !== 0) {
      writer.uint32(80).int32(message.parkingBrakeState);
    }
    if (message.controllingTakId !== undefined) {
      writer.uint32(90).string(message.controllingTakId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToTakHeartbeat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToTakHeartbeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.robotId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.platformType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.vpnIpAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.state = CortexStateUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gpsCoordinate = GeoPoint.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.magneticHeadingDeg = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.batteryPercentage = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.bodySpeedMPerS = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.parkingBrakeState = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.controllingTakId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToTakHeartbeat {
    return {
      robotId: isSet(object.robotId) ? globalThis.String(object.robotId) : "",
      platformType: isSet(object.platformType) ? globalThis.String(object.platformType) : "",
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      vpnIpAddress: isSet(object.vpnIpAddress) ? globalThis.String(object.vpnIpAddress) : "",
      state: isSet(object.state) ? CortexStateUpdate.fromJSON(object.state) : undefined,
      gpsCoordinate: isSet(object.gpsCoordinate) ? GeoPoint.fromJSON(object.gpsCoordinate) : undefined,
      magneticHeadingDeg: isSet(object.magneticHeadingDeg) ? globalThis.Number(object.magneticHeadingDeg) : 0,
      batteryPercentage: isSet(object.batteryPercentage) ? globalThis.Number(object.batteryPercentage) : 0,
      bodySpeedMPerS: isSet(object.bodySpeedMPerS) ? globalThis.Number(object.bodySpeedMPerS) : 0,
      parkingBrakeState: isSet(object.parkingBrakeState) ? parkingBrakeStateFromJSON(object.parkingBrakeState) : 0,
      controllingTakId: isSet(object.controllingTakId) ? globalThis.String(object.controllingTakId) : undefined,
    };
  },

  toJSON(message: ToTakHeartbeat): unknown {
    const obj: any = {};
    if (message.robotId !== "") {
      obj.robotId = message.robotId;
    }
    if (message.platformType !== "") {
      obj.platformType = message.platformType;
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.vpnIpAddress !== "") {
      obj.vpnIpAddress = message.vpnIpAddress;
    }
    if (message.state !== undefined) {
      obj.state = CortexStateUpdate.toJSON(message.state);
    }
    if (message.gpsCoordinate !== undefined) {
      obj.gpsCoordinate = GeoPoint.toJSON(message.gpsCoordinate);
    }
    if (message.magneticHeadingDeg !== 0) {
      obj.magneticHeadingDeg = message.magneticHeadingDeg;
    }
    if (message.batteryPercentage !== 0) {
      obj.batteryPercentage = message.batteryPercentage;
    }
    if (message.bodySpeedMPerS !== 0) {
      obj.bodySpeedMPerS = message.bodySpeedMPerS;
    }
    if (message.parkingBrakeState !== 0) {
      obj.parkingBrakeState = parkingBrakeStateToJSON(message.parkingBrakeState);
    }
    if (message.controllingTakId !== undefined) {
      obj.controllingTakId = message.controllingTakId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToTakHeartbeat>, I>>(base?: I): ToTakHeartbeat {
    return ToTakHeartbeat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToTakHeartbeat>, I>>(object: I): ToTakHeartbeat {
    const message = createBaseToTakHeartbeat();
    message.robotId = object.robotId ?? "";
    message.platformType = object.platformType ?? "";
    message.ipAddress = object.ipAddress ?? "";
    message.vpnIpAddress = object.vpnIpAddress ?? "";
    message.state = (object.state !== undefined && object.state !== null)
      ? CortexStateUpdate.fromPartial(object.state)
      : undefined;
    message.gpsCoordinate = (object.gpsCoordinate !== undefined && object.gpsCoordinate !== null)
      ? GeoPoint.fromPartial(object.gpsCoordinate)
      : undefined;
    message.magneticHeadingDeg = object.magneticHeadingDeg ?? 0;
    message.batteryPercentage = object.batteryPercentage ?? 0;
    message.bodySpeedMPerS = object.bodySpeedMPerS ?? 0;
    message.parkingBrakeState = object.parkingBrakeState ?? 0;
    message.controllingTakId = object.controllingTakId ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
