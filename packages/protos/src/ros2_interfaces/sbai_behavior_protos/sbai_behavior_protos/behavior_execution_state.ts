// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_behavior_protos/sbai_behavior_protos/behavior_execution_state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ActiveBehaviorStates } from "../../../sbai_behavior_protos/active_behavior_states";
import { BehaviorRequestQueue } from "../../../sbai_behavior_protos/behavior_request_queue";
import { CompletedBehaviors } from "../../../sbai_behavior_protos/completed_behaviors";

export const protobufPackage = "sbai_behavior_protos";

export interface BehaviorExecutionState {
  activeBehaviorsMap: ActiveBehaviorStates | undefined;
  behaviorRequestQueue: BehaviorRequestQueue | undefined;
  completedBehaviorsMap: CompletedBehaviors | undefined;
}

function createBaseBehaviorExecutionState(): BehaviorExecutionState {
  return { activeBehaviorsMap: undefined, behaviorRequestQueue: undefined, completedBehaviorsMap: undefined };
}

export const BehaviorExecutionState: MessageFns<BehaviorExecutionState> = {
  encode(message: BehaviorExecutionState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.activeBehaviorsMap !== undefined) {
      ActiveBehaviorStates.encode(message.activeBehaviorsMap, writer.uint32(10).fork()).join();
    }
    if (message.behaviorRequestQueue !== undefined) {
      BehaviorRequestQueue.encode(message.behaviorRequestQueue, writer.uint32(18).fork()).join();
    }
    if (message.completedBehaviorsMap !== undefined) {
      CompletedBehaviors.encode(message.completedBehaviorsMap, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BehaviorExecutionState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBehaviorExecutionState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.activeBehaviorsMap = ActiveBehaviorStates.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.behaviorRequestQueue = BehaviorRequestQueue.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.completedBehaviorsMap = CompletedBehaviors.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BehaviorExecutionState {
    return {
      activeBehaviorsMap: isSet(object.activeBehaviorsMap)
        ? ActiveBehaviorStates.fromJSON(object.activeBehaviorsMap)
        : undefined,
      behaviorRequestQueue: isSet(object.behaviorRequestQueue)
        ? BehaviorRequestQueue.fromJSON(object.behaviorRequestQueue)
        : undefined,
      completedBehaviorsMap: isSet(object.completedBehaviorsMap)
        ? CompletedBehaviors.fromJSON(object.completedBehaviorsMap)
        : undefined,
    };
  },

  toJSON(message: BehaviorExecutionState): unknown {
    const obj: any = {};
    if (message.activeBehaviorsMap !== undefined) {
      obj.activeBehaviorsMap = ActiveBehaviorStates.toJSON(message.activeBehaviorsMap);
    }
    if (message.behaviorRequestQueue !== undefined) {
      obj.behaviorRequestQueue = BehaviorRequestQueue.toJSON(message.behaviorRequestQueue);
    }
    if (message.completedBehaviorsMap !== undefined) {
      obj.completedBehaviorsMap = CompletedBehaviors.toJSON(message.completedBehaviorsMap);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BehaviorExecutionState>, I>>(base?: I): BehaviorExecutionState {
    return BehaviorExecutionState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BehaviorExecutionState>, I>>(object: I): BehaviorExecutionState {
    const message = createBaseBehaviorExecutionState();
    message.activeBehaviorsMap = (object.activeBehaviorsMap !== undefined && object.activeBehaviorsMap !== null)
      ? ActiveBehaviorStates.fromPartial(object.activeBehaviorsMap)
      : undefined;
    message.behaviorRequestQueue = (object.behaviorRequestQueue !== undefined && object.behaviorRequestQueue !== null)
      ? BehaviorRequestQueue.fromPartial(object.behaviorRequestQueue)
      : undefined;
    message.completedBehaviorsMap =
      (object.completedBehaviorsMap !== undefined && object.completedBehaviorsMap !== null)
        ? CompletedBehaviors.fromPartial(object.completedBehaviorsMap)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
