// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_swarm_discovery_protos/sbai_swarm_discovery_protos/shared_ecef_odometry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PoseStamped } from "../../../sbai_geometry_protos/pose_stamped";
import { Twist } from "../../../sbai_geometry_protos/twist";

export const protobufPackage = "sbai_swarm_discovery_protos";

export interface SharedEcefOdometry {
  poseInEarthFrame: PoseStamped | undefined;
  twist: Twist | undefined;
  robotId: string;
}

function createBaseSharedEcefOdometry(): SharedEcefOdometry {
  return { poseInEarthFrame: undefined, twist: undefined, robotId: "" };
}

export const SharedEcefOdometry: MessageFns<SharedEcefOdometry> = {
  encode(message: SharedEcefOdometry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poseInEarthFrame !== undefined) {
      PoseStamped.encode(message.poseInEarthFrame, writer.uint32(10).fork()).join();
    }
    if (message.twist !== undefined) {
      Twist.encode(message.twist, writer.uint32(18).fork()).join();
    }
    if (message.robotId !== "") {
      writer.uint32(26).string(message.robotId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SharedEcefOdometry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSharedEcefOdometry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.poseInEarthFrame = PoseStamped.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.twist = Twist.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.robotId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SharedEcefOdometry {
    return {
      poseInEarthFrame: isSet(object.poseInEarthFrame) ? PoseStamped.fromJSON(object.poseInEarthFrame) : undefined,
      twist: isSet(object.twist) ? Twist.fromJSON(object.twist) : undefined,
      robotId: isSet(object.robotId) ? globalThis.String(object.robotId) : "",
    };
  },

  toJSON(message: SharedEcefOdometry): unknown {
    const obj: any = {};
    if (message.poseInEarthFrame !== undefined) {
      obj.poseInEarthFrame = PoseStamped.toJSON(message.poseInEarthFrame);
    }
    if (message.twist !== undefined) {
      obj.twist = Twist.toJSON(message.twist);
    }
    if (message.robotId !== "") {
      obj.robotId = message.robotId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SharedEcefOdometry>, I>>(base?: I): SharedEcefOdometry {
    return SharedEcefOdometry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SharedEcefOdometry>, I>>(object: I): SharedEcefOdometry {
    const message = createBaseSharedEcefOdometry();
    message.poseInEarthFrame = (object.poseInEarthFrame !== undefined && object.poseInEarthFrame !== null)
      ? PoseStamped.fromPartial(object.poseInEarthFrame)
      : undefined;
    message.twist = (object.twist !== undefined && object.twist !== null) ? Twist.fromPartial(object.twist) : undefined;
    message.robotId = object.robotId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
