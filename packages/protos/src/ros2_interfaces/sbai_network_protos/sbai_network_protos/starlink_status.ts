// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_network_protos/sbai_network_protos/starlink_status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_network_protos";

export enum StarlinkState {
  STARLINK_STATE_UNSPECIFIED = 0,
  STARLINK_STATE_UNREACHABLE = 1,
  STARLINK_STATE_UNKNOWN = 2,
  STARLINK_STATE_CONNECTED = 3,
  STARLINK_STATE_BOOTING = 4,
  STARLINK_STATE_SEARCHING = 5,
  STARLINK_STATE_STOWED = 6,
  STARLINK_STATE_THERMAL_SHUTDOWN = 7,
  STARLINK_STATE_NO_SATS = 8,
  STARLINK_STATE_OBSTRUCTED = 9,
  STARLINK_STATE_NO_DOWNLINK = 10,
  STARLINK_STATE_NO_PINGS = 11,
  UNRECOGNIZED = -1,
}

export function starlinkStateFromJSON(object: any): StarlinkState {
  switch (object) {
    case 0:
    case "STARLINK_STATE_UNSPECIFIED":
      return StarlinkState.STARLINK_STATE_UNSPECIFIED;
    case 1:
    case "STARLINK_STATE_UNREACHABLE":
      return StarlinkState.STARLINK_STATE_UNREACHABLE;
    case 2:
    case "STARLINK_STATE_UNKNOWN":
      return StarlinkState.STARLINK_STATE_UNKNOWN;
    case 3:
    case "STARLINK_STATE_CONNECTED":
      return StarlinkState.STARLINK_STATE_CONNECTED;
    case 4:
    case "STARLINK_STATE_BOOTING":
      return StarlinkState.STARLINK_STATE_BOOTING;
    case 5:
    case "STARLINK_STATE_SEARCHING":
      return StarlinkState.STARLINK_STATE_SEARCHING;
    case 6:
    case "STARLINK_STATE_STOWED":
      return StarlinkState.STARLINK_STATE_STOWED;
    case 7:
    case "STARLINK_STATE_THERMAL_SHUTDOWN":
      return StarlinkState.STARLINK_STATE_THERMAL_SHUTDOWN;
    case 8:
    case "STARLINK_STATE_NO_SATS":
      return StarlinkState.STARLINK_STATE_NO_SATS;
    case 9:
    case "STARLINK_STATE_OBSTRUCTED":
      return StarlinkState.STARLINK_STATE_OBSTRUCTED;
    case 10:
    case "STARLINK_STATE_NO_DOWNLINK":
      return StarlinkState.STARLINK_STATE_NO_DOWNLINK;
    case 11:
    case "STARLINK_STATE_NO_PINGS":
      return StarlinkState.STARLINK_STATE_NO_PINGS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StarlinkState.UNRECOGNIZED;
  }
}

export function starlinkStateToJSON(object: StarlinkState): string {
  switch (object) {
    case StarlinkState.STARLINK_STATE_UNSPECIFIED:
      return "STARLINK_STATE_UNSPECIFIED";
    case StarlinkState.STARLINK_STATE_UNREACHABLE:
      return "STARLINK_STATE_UNREACHABLE";
    case StarlinkState.STARLINK_STATE_UNKNOWN:
      return "STARLINK_STATE_UNKNOWN";
    case StarlinkState.STARLINK_STATE_CONNECTED:
      return "STARLINK_STATE_CONNECTED";
    case StarlinkState.STARLINK_STATE_BOOTING:
      return "STARLINK_STATE_BOOTING";
    case StarlinkState.STARLINK_STATE_SEARCHING:
      return "STARLINK_STATE_SEARCHING";
    case StarlinkState.STARLINK_STATE_STOWED:
      return "STARLINK_STATE_STOWED";
    case StarlinkState.STARLINK_STATE_THERMAL_SHUTDOWN:
      return "STARLINK_STATE_THERMAL_SHUTDOWN";
    case StarlinkState.STARLINK_STATE_NO_SATS:
      return "STARLINK_STATE_NO_SATS";
    case StarlinkState.STARLINK_STATE_OBSTRUCTED:
      return "STARLINK_STATE_OBSTRUCTED";
    case StarlinkState.STARLINK_STATE_NO_DOWNLINK:
      return "STARLINK_STATE_NO_DOWNLINK";
    case StarlinkState.STARLINK_STATE_NO_PINGS:
      return "STARLINK_STATE_NO_PINGS";
    case StarlinkState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface StarlinkStatus {
  starlinkState: StarlinkState;
  /** human readable alert flags */
  alertInfo: string[];
  /** packet loss */
  popPingDropRate: number;
  /** latency */
  popPingLatencyMs: number;
  /** fraction starlink field of view is obstructed */
  fractionObstructed: number;
}

function createBaseStarlinkStatus(): StarlinkStatus {
  return { starlinkState: 0, alertInfo: [], popPingDropRate: 0, popPingLatencyMs: 0, fractionObstructed: 0 };
}

export const StarlinkStatus: MessageFns<StarlinkStatus> = {
  encode(message: StarlinkStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.starlinkState !== 0) {
      writer.uint32(8).int32(message.starlinkState);
    }
    for (const v of message.alertInfo) {
      writer.uint32(18).string(v!);
    }
    if (message.popPingDropRate !== 0) {
      writer.uint32(25).double(message.popPingDropRate);
    }
    if (message.popPingLatencyMs !== 0) {
      writer.uint32(33).double(message.popPingLatencyMs);
    }
    if (message.fractionObstructed !== 0) {
      writer.uint32(41).double(message.fractionObstructed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StarlinkStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStarlinkStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.starlinkState = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.alertInfo.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.popPingDropRate = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.popPingLatencyMs = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.fractionObstructed = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StarlinkStatus {
    return {
      starlinkState: isSet(object.starlinkState) ? starlinkStateFromJSON(object.starlinkState) : 0,
      alertInfo: globalThis.Array.isArray(object?.alertInfo)
        ? object.alertInfo.map((e: any) => globalThis.String(e))
        : [],
      popPingDropRate: isSet(object.popPingDropRate) ? globalThis.Number(object.popPingDropRate) : 0,
      popPingLatencyMs: isSet(object.popPingLatencyMs) ? globalThis.Number(object.popPingLatencyMs) : 0,
      fractionObstructed: isSet(object.fractionObstructed) ? globalThis.Number(object.fractionObstructed) : 0,
    };
  },

  toJSON(message: StarlinkStatus): unknown {
    const obj: any = {};
    if (message.starlinkState !== 0) {
      obj.starlinkState = starlinkStateToJSON(message.starlinkState);
    }
    if (message.alertInfo?.length) {
      obj.alertInfo = message.alertInfo;
    }
    if (message.popPingDropRate !== 0) {
      obj.popPingDropRate = message.popPingDropRate;
    }
    if (message.popPingLatencyMs !== 0) {
      obj.popPingLatencyMs = message.popPingLatencyMs;
    }
    if (message.fractionObstructed !== 0) {
      obj.fractionObstructed = message.fractionObstructed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StarlinkStatus>, I>>(base?: I): StarlinkStatus {
    return StarlinkStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StarlinkStatus>, I>>(object: I): StarlinkStatus {
    const message = createBaseStarlinkStatus();
    message.starlinkState = object.starlinkState ?? 0;
    message.alertInfo = object.alertInfo?.map((e) => e) || [];
    message.popPingDropRate = object.popPingDropRate ?? 0;
    message.popPingLatencyMs = object.popPingLatencyMs ?? 0;
    message.fractionObstructed = object.fractionObstructed ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
