// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_network_protos/sbai_network_protos/satellite_metrics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_network_protos";

export interface SatelliteMetrics {
  /** IP to test Internet connectivity against */
  testInternetIp: string;
  /** Round Trip Time statistics */
  minRttMs: number;
  maxRttMs: number;
  avgRttMs: number;
  stdDevRttMs: number;
  packetLossPercent: number;
  /** Physical link detection */
  isLinkDetected: boolean;
}

function createBaseSatelliteMetrics(): SatelliteMetrics {
  return {
    testInternetIp: "",
    minRttMs: 0,
    maxRttMs: 0,
    avgRttMs: 0,
    stdDevRttMs: 0,
    packetLossPercent: 0,
    isLinkDetected: false,
  };
}

export const SatelliteMetrics: MessageFns<SatelliteMetrics> = {
  encode(message: SatelliteMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.testInternetIp !== "") {
      writer.uint32(10).string(message.testInternetIp);
    }
    if (message.minRttMs !== 0) {
      writer.uint32(17).double(message.minRttMs);
    }
    if (message.maxRttMs !== 0) {
      writer.uint32(25).double(message.maxRttMs);
    }
    if (message.avgRttMs !== 0) {
      writer.uint32(33).double(message.avgRttMs);
    }
    if (message.stdDevRttMs !== 0) {
      writer.uint32(41).double(message.stdDevRttMs);
    }
    if (message.packetLossPercent !== 0) {
      writer.uint32(49).double(message.packetLossPercent);
    }
    if (message.isLinkDetected !== false) {
      writer.uint32(56).bool(message.isLinkDetected);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SatelliteMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSatelliteMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.testInternetIp = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.minRttMs = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.maxRttMs = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.avgRttMs = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.stdDevRttMs = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.packetLossPercent = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isLinkDetected = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SatelliteMetrics {
    return {
      testInternetIp: isSet(object.testInternetIp) ? globalThis.String(object.testInternetIp) : "",
      minRttMs: isSet(object.minRttMs) ? globalThis.Number(object.minRttMs) : 0,
      maxRttMs: isSet(object.maxRttMs) ? globalThis.Number(object.maxRttMs) : 0,
      avgRttMs: isSet(object.avgRttMs) ? globalThis.Number(object.avgRttMs) : 0,
      stdDevRttMs: isSet(object.stdDevRttMs) ? globalThis.Number(object.stdDevRttMs) : 0,
      packetLossPercent: isSet(object.packetLossPercent) ? globalThis.Number(object.packetLossPercent) : 0,
      isLinkDetected: isSet(object.isLinkDetected) ? globalThis.Boolean(object.isLinkDetected) : false,
    };
  },

  toJSON(message: SatelliteMetrics): unknown {
    const obj: any = {};
    if (message.testInternetIp !== "") {
      obj.testInternetIp = message.testInternetIp;
    }
    if (message.minRttMs !== 0) {
      obj.minRttMs = message.minRttMs;
    }
    if (message.maxRttMs !== 0) {
      obj.maxRttMs = message.maxRttMs;
    }
    if (message.avgRttMs !== 0) {
      obj.avgRttMs = message.avgRttMs;
    }
    if (message.stdDevRttMs !== 0) {
      obj.stdDevRttMs = message.stdDevRttMs;
    }
    if (message.packetLossPercent !== 0) {
      obj.packetLossPercent = message.packetLossPercent;
    }
    if (message.isLinkDetected !== false) {
      obj.isLinkDetected = message.isLinkDetected;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SatelliteMetrics>, I>>(base?: I): SatelliteMetrics {
    return SatelliteMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SatelliteMetrics>, I>>(object: I): SatelliteMetrics {
    const message = createBaseSatelliteMetrics();
    message.testInternetIp = object.testInternetIp ?? "";
    message.minRttMs = object.minRttMs ?? 0;
    message.maxRttMs = object.maxRttMs ?? 0;
    message.avgRttMs = object.avgRttMs ?? 0;
    message.stdDevRttMs = object.stdDevRttMs ?? 0;
    message.packetLossPercent = object.packetLossPercent ?? 0;
    message.isLinkDetected = object.isLinkDetected ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
