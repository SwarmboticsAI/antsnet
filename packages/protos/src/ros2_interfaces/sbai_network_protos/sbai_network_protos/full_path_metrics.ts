// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_network_protos/sbai_network_protos/full_path_metrics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_network_protos";

export interface LinkMetrics {
  /** Name of the endpoint of the link */
  endpointName: string;
  /** IP address used to check link connectivity */
  targetIp: string;
  /** Round Trip Time statistics */
  minRttMs: number;
  maxRttMs: number;
  avgRttMs: number;
  stdDevRttMs: number;
  packetLossPercent: number;
}

export interface FullPathMetrics {
  linksMetrics: { [key: string]: LinkMetrics };
}

export interface FullPathMetrics_LinksMetricsEntry {
  key: string;
  value: LinkMetrics | undefined;
}

function createBaseLinkMetrics(): LinkMetrics {
  return {
    endpointName: "",
    targetIp: "",
    minRttMs: 0,
    maxRttMs: 0,
    avgRttMs: 0,
    stdDevRttMs: 0,
    packetLossPercent: 0,
  };
}

export const LinkMetrics: MessageFns<LinkMetrics> = {
  encode(message: LinkMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointName !== "") {
      writer.uint32(10).string(message.endpointName);
    }
    if (message.targetIp !== "") {
      writer.uint32(18).string(message.targetIp);
    }
    if (message.minRttMs !== 0) {
      writer.uint32(25).double(message.minRttMs);
    }
    if (message.maxRttMs !== 0) {
      writer.uint32(33).double(message.maxRttMs);
    }
    if (message.avgRttMs !== 0) {
      writer.uint32(41).double(message.avgRttMs);
    }
    if (message.stdDevRttMs !== 0) {
      writer.uint32(49).double(message.stdDevRttMs);
    }
    if (message.packetLossPercent !== 0) {
      writer.uint32(57).double(message.packetLossPercent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.targetIp = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.minRttMs = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.maxRttMs = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.avgRttMs = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.stdDevRttMs = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.packetLossPercent = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkMetrics {
    return {
      endpointName: isSet(object.endpointName) ? globalThis.String(object.endpointName) : "",
      targetIp: isSet(object.targetIp) ? globalThis.String(object.targetIp) : "",
      minRttMs: isSet(object.minRttMs) ? globalThis.Number(object.minRttMs) : 0,
      maxRttMs: isSet(object.maxRttMs) ? globalThis.Number(object.maxRttMs) : 0,
      avgRttMs: isSet(object.avgRttMs) ? globalThis.Number(object.avgRttMs) : 0,
      stdDevRttMs: isSet(object.stdDevRttMs) ? globalThis.Number(object.stdDevRttMs) : 0,
      packetLossPercent: isSet(object.packetLossPercent) ? globalThis.Number(object.packetLossPercent) : 0,
    };
  },

  toJSON(message: LinkMetrics): unknown {
    const obj: any = {};
    if (message.endpointName !== "") {
      obj.endpointName = message.endpointName;
    }
    if (message.targetIp !== "") {
      obj.targetIp = message.targetIp;
    }
    if (message.minRttMs !== 0) {
      obj.minRttMs = message.minRttMs;
    }
    if (message.maxRttMs !== 0) {
      obj.maxRttMs = message.maxRttMs;
    }
    if (message.avgRttMs !== 0) {
      obj.avgRttMs = message.avgRttMs;
    }
    if (message.stdDevRttMs !== 0) {
      obj.stdDevRttMs = message.stdDevRttMs;
    }
    if (message.packetLossPercent !== 0) {
      obj.packetLossPercent = message.packetLossPercent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkMetrics>, I>>(base?: I): LinkMetrics {
    return LinkMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkMetrics>, I>>(object: I): LinkMetrics {
    const message = createBaseLinkMetrics();
    message.endpointName = object.endpointName ?? "";
    message.targetIp = object.targetIp ?? "";
    message.minRttMs = object.minRttMs ?? 0;
    message.maxRttMs = object.maxRttMs ?? 0;
    message.avgRttMs = object.avgRttMs ?? 0;
    message.stdDevRttMs = object.stdDevRttMs ?? 0;
    message.packetLossPercent = object.packetLossPercent ?? 0;
    return message;
  },
};

function createBaseFullPathMetrics(): FullPathMetrics {
  return { linksMetrics: {} };
}

export const FullPathMetrics: MessageFns<FullPathMetrics> = {
  encode(message: FullPathMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.linksMetrics).forEach(([key, value]) => {
      FullPathMetrics_LinksMetricsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FullPathMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFullPathMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = FullPathMetrics_LinksMetricsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.linksMetrics[entry8.key] = entry8.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FullPathMetrics {
    return {
      linksMetrics: isObject(object.linksMetrics)
        ? Object.entries(object.linksMetrics).reduce<{ [key: string]: LinkMetrics }>((acc, [key, value]) => {
          acc[key] = LinkMetrics.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: FullPathMetrics): unknown {
    const obj: any = {};
    if (message.linksMetrics) {
      const entries = Object.entries(message.linksMetrics);
      if (entries.length > 0) {
        obj.linksMetrics = {};
        entries.forEach(([k, v]) => {
          obj.linksMetrics[k] = LinkMetrics.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FullPathMetrics>, I>>(base?: I): FullPathMetrics {
    return FullPathMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FullPathMetrics>, I>>(object: I): FullPathMetrics {
    const message = createBaseFullPathMetrics();
    message.linksMetrics = Object.entries(object.linksMetrics ?? {}).reduce<{ [key: string]: LinkMetrics }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = LinkMetrics.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseFullPathMetrics_LinksMetricsEntry(): FullPathMetrics_LinksMetricsEntry {
  return { key: "", value: undefined };
}

export const FullPathMetrics_LinksMetricsEntry: MessageFns<FullPathMetrics_LinksMetricsEntry> = {
  encode(message: FullPathMetrics_LinksMetricsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      LinkMetrics.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FullPathMetrics_LinksMetricsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFullPathMetrics_LinksMetricsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = LinkMetrics.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FullPathMetrics_LinksMetricsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? LinkMetrics.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: FullPathMetrics_LinksMetricsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = LinkMetrics.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FullPathMetrics_LinksMetricsEntry>, I>>(
    base?: I,
  ): FullPathMetrics_LinksMetricsEntry {
    return FullPathMetrics_LinksMetricsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FullPathMetrics_LinksMetricsEntry>, I>>(
    object: I,
  ): FullPathMetrics_LinksMetricsEntry {
    const message = createBaseFullPathMetrics_LinksMetricsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? LinkMetrics.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
