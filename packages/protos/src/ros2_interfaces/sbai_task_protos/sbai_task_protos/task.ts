// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_task_protos/sbai_task_protos/task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PoseStamped } from "../../../sbai_geometry_protos/pose_stamped";

export const protobufPackage = "sbai_task_protos";

export enum TaskType {
  TASK_TYPE_UNSPECIFIED = 0,
  TASK_TYPE_COMPOSITE = 1,
  TASK_TYPE_PERFORM_ASSIGNMENT = 2,
  TASK_TYPE_FREE_SPACE_NAVIGATE_TO_POSE = 3,
  TASK_TYPE_FREE_SPACE_NAVIGATE_THROUGH_POSES = 4,
  TASK_TYPE_FOLLOW_ROUTE_TO_POSE = 5,
  TASK_TYPE_WAIT_FOR_INTERVENTION = 6,
  TASK_TYPE_REPEAT_TASK = 7,
  UNRECOGNIZED = -1,
}

export function taskTypeFromJSON(object: any): TaskType {
  switch (object) {
    case 0:
    case "TASK_TYPE_UNSPECIFIED":
      return TaskType.TASK_TYPE_UNSPECIFIED;
    case 1:
    case "TASK_TYPE_COMPOSITE":
      return TaskType.TASK_TYPE_COMPOSITE;
    case 2:
    case "TASK_TYPE_PERFORM_ASSIGNMENT":
      return TaskType.TASK_TYPE_PERFORM_ASSIGNMENT;
    case 3:
    case "TASK_TYPE_FREE_SPACE_NAVIGATE_TO_POSE":
      return TaskType.TASK_TYPE_FREE_SPACE_NAVIGATE_TO_POSE;
    case 4:
    case "TASK_TYPE_FREE_SPACE_NAVIGATE_THROUGH_POSES":
      return TaskType.TASK_TYPE_FREE_SPACE_NAVIGATE_THROUGH_POSES;
    case 5:
    case "TASK_TYPE_FOLLOW_ROUTE_TO_POSE":
      return TaskType.TASK_TYPE_FOLLOW_ROUTE_TO_POSE;
    case 6:
    case "TASK_TYPE_WAIT_FOR_INTERVENTION":
      return TaskType.TASK_TYPE_WAIT_FOR_INTERVENTION;
    case 7:
    case "TASK_TYPE_REPEAT_TASK":
      return TaskType.TASK_TYPE_REPEAT_TASK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TaskType.UNRECOGNIZED;
  }
}

export function taskTypeToJSON(object: TaskType): string {
  switch (object) {
    case TaskType.TASK_TYPE_UNSPECIFIED:
      return "TASK_TYPE_UNSPECIFIED";
    case TaskType.TASK_TYPE_COMPOSITE:
      return "TASK_TYPE_COMPOSITE";
    case TaskType.TASK_TYPE_PERFORM_ASSIGNMENT:
      return "TASK_TYPE_PERFORM_ASSIGNMENT";
    case TaskType.TASK_TYPE_FREE_SPACE_NAVIGATE_TO_POSE:
      return "TASK_TYPE_FREE_SPACE_NAVIGATE_TO_POSE";
    case TaskType.TASK_TYPE_FREE_SPACE_NAVIGATE_THROUGH_POSES:
      return "TASK_TYPE_FREE_SPACE_NAVIGATE_THROUGH_POSES";
    case TaskType.TASK_TYPE_FOLLOW_ROUTE_TO_POSE:
      return "TASK_TYPE_FOLLOW_ROUTE_TO_POSE";
    case TaskType.TASK_TYPE_WAIT_FOR_INTERVENTION:
      return "TASK_TYPE_WAIT_FOR_INTERVENTION";
    case TaskType.TASK_TYPE_REPEAT_TASK:
      return "TASK_TYPE_REPEAT_TASK";
    case TaskType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents a constraint (placeholder - define based on your constraint_t type) */
export interface Constraint {
}

export interface NavigationTask {
  goal: PoseStamped | undefined;
  constraint?:
    | Constraint
    | undefined;
  /** for route following */
  route: PoseStamped[];
  xyGoalToleranceM?: number | undefined;
  yawGoalToleranceRad?: number | undefined;
}

export interface AssignmentTask {
  participatingRobotIds: string[];
}

/** Represents a unit of work in the swarm stack */
export interface Task {
  /** ID of the higher-level swarm behavior this task belongs to */
  behaviorId: string;
  /** Unique identifier for this task w.r.t. the behavior */
  taskId: number;
  taskType: TaskType;
  subTasks: Task[];
  navigationTask?: NavigationTask | undefined;
  assignmentTask?: AssignmentTask | undefined;
}

function createBaseConstraint(): Constraint {
  return {};
}

export const Constraint: MessageFns<Constraint> = {
  encode(_: Constraint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Constraint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConstraint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Constraint {
    return {};
  },

  toJSON(_: Constraint): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Constraint>, I>>(base?: I): Constraint {
    return Constraint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Constraint>, I>>(_: I): Constraint {
    const message = createBaseConstraint();
    return message;
  },
};

function createBaseNavigationTask(): NavigationTask {
  return {
    goal: undefined,
    constraint: undefined,
    route: [],
    xyGoalToleranceM: undefined,
    yawGoalToleranceRad: undefined,
  };
}

export const NavigationTask: MessageFns<NavigationTask> = {
  encode(message: NavigationTask, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.goal !== undefined) {
      PoseStamped.encode(message.goal, writer.uint32(10).fork()).join();
    }
    if (message.constraint !== undefined) {
      Constraint.encode(message.constraint, writer.uint32(18).fork()).join();
    }
    for (const v of message.route) {
      PoseStamped.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.xyGoalToleranceM !== undefined) {
      writer.uint32(33).double(message.xyGoalToleranceM);
    }
    if (message.yawGoalToleranceRad !== undefined) {
      writer.uint32(41).double(message.yawGoalToleranceRad);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NavigationTask {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNavigationTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.goal = PoseStamped.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.constraint = Constraint.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.route.push(PoseStamped.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.xyGoalToleranceM = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.yawGoalToleranceRad = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NavigationTask {
    return {
      goal: isSet(object.goal) ? PoseStamped.fromJSON(object.goal) : undefined,
      constraint: isSet(object.constraint) ? Constraint.fromJSON(object.constraint) : undefined,
      route: globalThis.Array.isArray(object?.route) ? object.route.map((e: any) => PoseStamped.fromJSON(e)) : [],
      xyGoalToleranceM: isSet(object.xyGoalToleranceM) ? globalThis.Number(object.xyGoalToleranceM) : undefined,
      yawGoalToleranceRad: isSet(object.yawGoalToleranceRad)
        ? globalThis.Number(object.yawGoalToleranceRad)
        : undefined,
    };
  },

  toJSON(message: NavigationTask): unknown {
    const obj: any = {};
    if (message.goal !== undefined) {
      obj.goal = PoseStamped.toJSON(message.goal);
    }
    if (message.constraint !== undefined) {
      obj.constraint = Constraint.toJSON(message.constraint);
    }
    if (message.route?.length) {
      obj.route = message.route.map((e) => PoseStamped.toJSON(e));
    }
    if (message.xyGoalToleranceM !== undefined) {
      obj.xyGoalToleranceM = message.xyGoalToleranceM;
    }
    if (message.yawGoalToleranceRad !== undefined) {
      obj.yawGoalToleranceRad = message.yawGoalToleranceRad;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NavigationTask>, I>>(base?: I): NavigationTask {
    return NavigationTask.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NavigationTask>, I>>(object: I): NavigationTask {
    const message = createBaseNavigationTask();
    message.goal = (object.goal !== undefined && object.goal !== null)
      ? PoseStamped.fromPartial(object.goal)
      : undefined;
    message.constraint = (object.constraint !== undefined && object.constraint !== null)
      ? Constraint.fromPartial(object.constraint)
      : undefined;
    message.route = object.route?.map((e) => PoseStamped.fromPartial(e)) || [];
    message.xyGoalToleranceM = object.xyGoalToleranceM ?? undefined;
    message.yawGoalToleranceRad = object.yawGoalToleranceRad ?? undefined;
    return message;
  },
};

function createBaseAssignmentTask(): AssignmentTask {
  return { participatingRobotIds: [] };
}

export const AssignmentTask: MessageFns<AssignmentTask> = {
  encode(message: AssignmentTask, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.participatingRobotIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignmentTask {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignmentTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participatingRobotIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignmentTask {
    return {
      participatingRobotIds: globalThis.Array.isArray(object?.participatingRobotIds)
        ? object.participatingRobotIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AssignmentTask): unknown {
    const obj: any = {};
    if (message.participatingRobotIds?.length) {
      obj.participatingRobotIds = message.participatingRobotIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssignmentTask>, I>>(base?: I): AssignmentTask {
    return AssignmentTask.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssignmentTask>, I>>(object: I): AssignmentTask {
    const message = createBaseAssignmentTask();
    message.participatingRobotIds = object.participatingRobotIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseTask(): Task {
  return { behaviorId: "", taskId: 0, taskType: 0, subTasks: [], navigationTask: undefined, assignmentTask: undefined };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.behaviorId !== "") {
      writer.uint32(10).string(message.behaviorId);
    }
    if (message.taskId !== 0) {
      writer.uint32(16).int32(message.taskId);
    }
    if (message.taskType !== 0) {
      writer.uint32(24).int32(message.taskType);
    }
    for (const v of message.subTasks) {
      Task.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.navigationTask !== undefined) {
      NavigationTask.encode(message.navigationTask, writer.uint32(42).fork()).join();
    }
    if (message.assignmentTask !== undefined) {
      AssignmentTask.encode(message.assignmentTask, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.behaviorId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.taskId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.taskType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subTasks.push(Task.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.navigationTask = NavigationTask.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.assignmentTask = AssignmentTask.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      behaviorId: isSet(object.behaviorId) ? globalThis.String(object.behaviorId) : "",
      taskId: isSet(object.taskId) ? globalThis.Number(object.taskId) : 0,
      taskType: isSet(object.taskType) ? taskTypeFromJSON(object.taskType) : 0,
      subTasks: globalThis.Array.isArray(object?.subTasks) ? object.subTasks.map((e: any) => Task.fromJSON(e)) : [],
      navigationTask: isSet(object.navigationTask) ? NavigationTask.fromJSON(object.navigationTask) : undefined,
      assignmentTask: isSet(object.assignmentTask) ? AssignmentTask.fromJSON(object.assignmentTask) : undefined,
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.behaviorId !== "") {
      obj.behaviorId = message.behaviorId;
    }
    if (message.taskId !== 0) {
      obj.taskId = Math.round(message.taskId);
    }
    if (message.taskType !== 0) {
      obj.taskType = taskTypeToJSON(message.taskType);
    }
    if (message.subTasks?.length) {
      obj.subTasks = message.subTasks.map((e) => Task.toJSON(e));
    }
    if (message.navigationTask !== undefined) {
      obj.navigationTask = NavigationTask.toJSON(message.navigationTask);
    }
    if (message.assignmentTask !== undefined) {
      obj.assignmentTask = AssignmentTask.toJSON(message.assignmentTask);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Task>, I>>(base?: I): Task {
    return Task.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Task>, I>>(object: I): Task {
    const message = createBaseTask();
    message.behaviorId = object.behaviorId ?? "";
    message.taskId = object.taskId ?? 0;
    message.taskType = object.taskType ?? 0;
    message.subTasks = object.subTasks?.map((e) => Task.fromPartial(e)) || [];
    message.navigationTask = (object.navigationTask !== undefined && object.navigationTask !== null)
      ? NavigationTask.fromPartial(object.navigationTask)
      : undefined;
    message.assignmentTask = (object.assignmentTask !== undefined && object.assignmentTask !== null)
      ? AssignmentTask.fromPartial(object.assignmentTask)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
