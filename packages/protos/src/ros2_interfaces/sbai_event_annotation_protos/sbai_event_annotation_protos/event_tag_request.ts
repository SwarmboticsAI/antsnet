// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_event_annotation_protos/sbai_event_annotation_protos/event_tag_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../sbai_builtin_protos/duration";

export const protobufPackage = "sbai_event_annotation_protos";

export interface EventTagRequest {
  /** backwards time delta from message arrival to tag event start */
  eventStartOffset:
    | Duration
    | undefined;
  /** forward time delta from message arrival to tag event end */
  eventEndOffset: Duration | undefined;
  description: string;
  preserveHighBandwidthData: boolean;
}

function createBaseEventTagRequest(): EventTagRequest {
  return { eventStartOffset: undefined, eventEndOffset: undefined, description: "", preserveHighBandwidthData: false };
}

export const EventTagRequest: MessageFns<EventTagRequest> = {
  encode(message: EventTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventStartOffset !== undefined) {
      Duration.encode(message.eventStartOffset, writer.uint32(10).fork()).join();
    }
    if (message.eventEndOffset !== undefined) {
      Duration.encode(message.eventEndOffset, writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.preserveHighBandwidthData !== false) {
      writer.uint32(32).bool(message.preserveHighBandwidthData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventStartOffset = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventEndOffset = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.preserveHighBandwidthData = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTagRequest {
    return {
      eventStartOffset: isSet(object.eventStartOffset) ? Duration.fromJSON(object.eventStartOffset) : undefined,
      eventEndOffset: isSet(object.eventEndOffset) ? Duration.fromJSON(object.eventEndOffset) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      preserveHighBandwidthData: isSet(object.preserveHighBandwidthData)
        ? globalThis.Boolean(object.preserveHighBandwidthData)
        : false,
    };
  },

  toJSON(message: EventTagRequest): unknown {
    const obj: any = {};
    if (message.eventStartOffset !== undefined) {
      obj.eventStartOffset = Duration.toJSON(message.eventStartOffset);
    }
    if (message.eventEndOffset !== undefined) {
      obj.eventEndOffset = Duration.toJSON(message.eventEndOffset);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.preserveHighBandwidthData !== false) {
      obj.preserveHighBandwidthData = message.preserveHighBandwidthData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTagRequest>, I>>(base?: I): EventTagRequest {
    return EventTagRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTagRequest>, I>>(object: I): EventTagRequest {
    const message = createBaseEventTagRequest();
    message.eventStartOffset = (object.eventStartOffset !== undefined && object.eventStartOffset !== null)
      ? Duration.fromPartial(object.eventStartOffset)
      : undefined;
    message.eventEndOffset = (object.eventEndOffset !== undefined && object.eventEndOffset !== null)
      ? Duration.fromPartial(object.eventEndOffset)
      : undefined;
    message.description = object.description ?? "";
    message.preserveHighBandwidthData = object.preserveHighBandwidthData ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
