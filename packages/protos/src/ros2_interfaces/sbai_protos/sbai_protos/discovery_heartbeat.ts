// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_protos/sbai_protos/discovery_heartbeat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_protos";

export interface DiscoveryHeartbeat {
  robotId: string;
  platformType: string;
  ipAddress: string;
  vpnIpAddress: string;
}

function createBaseDiscoveryHeartbeat(): DiscoveryHeartbeat {
  return { robotId: "", platformType: "", ipAddress: "", vpnIpAddress: "" };
}

export const DiscoveryHeartbeat: MessageFns<DiscoveryHeartbeat> = {
  encode(message: DiscoveryHeartbeat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.robotId !== "") {
      writer.uint32(10).string(message.robotId);
    }
    if (message.platformType !== "") {
      writer.uint32(18).string(message.platformType);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    if (message.vpnIpAddress !== "") {
      writer.uint32(34).string(message.vpnIpAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoveryHeartbeat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoveryHeartbeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.robotId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.platformType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.vpnIpAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoveryHeartbeat {
    return {
      robotId: isSet(object.robotId) ? globalThis.String(object.robotId) : "",
      platformType: isSet(object.platformType) ? globalThis.String(object.platformType) : "",
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      vpnIpAddress: isSet(object.vpnIpAddress) ? globalThis.String(object.vpnIpAddress) : "",
    };
  },

  toJSON(message: DiscoveryHeartbeat): unknown {
    const obj: any = {};
    if (message.robotId !== "") {
      obj.robotId = message.robotId;
    }
    if (message.platformType !== "") {
      obj.platformType = message.platformType;
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.vpnIpAddress !== "") {
      obj.vpnIpAddress = message.vpnIpAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DiscoveryHeartbeat>, I>>(base?: I): DiscoveryHeartbeat {
    return DiscoveryHeartbeat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DiscoveryHeartbeat>, I>>(object: I): DiscoveryHeartbeat {
    const message = createBaseDiscoveryHeartbeat();
    message.robotId = object.robotId ?? "";
    message.platformType = object.platformType ?? "";
    message.ipAddress = object.ipAddress ?? "";
    message.vpnIpAddress = object.vpnIpAddress ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
