// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_protos/sbai_protos/direct_control_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../google/protobuf/wrappers";

export const protobufPackage = "sbai_protos";

export interface DirectControlResponse {
  accepted: boolean | undefined;
  directControlToken?: string | undefined;
  rejectionReason?: string | undefined;
}

function createBaseDirectControlResponse(): DirectControlResponse {
  return { accepted: undefined, directControlToken: undefined, rejectionReason: undefined };
}

export const DirectControlResponse: MessageFns<DirectControlResponse> = {
  encode(message: DirectControlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accepted !== undefined) {
      BoolValue.encode({ value: message.accepted! }, writer.uint32(10).fork()).join();
    }
    if (message.directControlToken !== undefined) {
      writer.uint32(18).string(message.directControlToken);
    }
    if (message.rejectionReason !== undefined) {
      writer.uint32(26).string(message.rejectionReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectControlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectControlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accepted = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.directControlToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rejectionReason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DirectControlResponse {
    return {
      accepted: isSet(object.accepted) ? Boolean(object.accepted) : undefined,
      directControlToken: isSet(object.directControlToken) ? globalThis.String(object.directControlToken) : undefined,
      rejectionReason: isSet(object.rejectionReason) ? globalThis.String(object.rejectionReason) : undefined,
    };
  },

  toJSON(message: DirectControlResponse): unknown {
    const obj: any = {};
    if (message.accepted !== undefined) {
      obj.accepted = message.accepted;
    }
    if (message.directControlToken !== undefined) {
      obj.directControlToken = message.directControlToken;
    }
    if (message.rejectionReason !== undefined) {
      obj.rejectionReason = message.rejectionReason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DirectControlResponse>, I>>(base?: I): DirectControlResponse {
    return DirectControlResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DirectControlResponse>, I>>(object: I): DirectControlResponse {
    const message = createBaseDirectControlResponse();
    message.accepted = object.accepted ?? undefined;
    message.directControlToken = object.directControlToken ?? undefined;
    message.rejectionReason = object.rejectionReason ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
