// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_protos/sbai_protos/restart_behavior.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RequestHeader } from "../../../sbai_protos/request_header";

export const protobufPackage = "sbai_protos";

export interface RestartBehaviorRequest {
  header: RequestHeader | undefined;
  behaviorRequestId: string;
}

export interface RestartBehaviorResponse {
  success: boolean;
}

function createBaseRestartBehaviorRequest(): RestartBehaviorRequest {
  return { header: undefined, behaviorRequestId: "" };
}

export const RestartBehaviorRequest: MessageFns<RestartBehaviorRequest> = {
  encode(message: RestartBehaviorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      RequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.behaviorRequestId !== "") {
      writer.uint32(18).string(message.behaviorRequestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartBehaviorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartBehaviorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = RequestHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.behaviorRequestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestartBehaviorRequest {
    return {
      header: isSet(object.header) ? RequestHeader.fromJSON(object.header) : undefined,
      behaviorRequestId: isSet(object.behaviorRequestId) ? globalThis.String(object.behaviorRequestId) : "",
    };
  },

  toJSON(message: RestartBehaviorRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = RequestHeader.toJSON(message.header);
    }
    if (message.behaviorRequestId !== "") {
      obj.behaviorRequestId = message.behaviorRequestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestartBehaviorRequest>, I>>(base?: I): RestartBehaviorRequest {
    return RestartBehaviorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestartBehaviorRequest>, I>>(object: I): RestartBehaviorRequest {
    const message = createBaseRestartBehaviorRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? RequestHeader.fromPartial(object.header)
      : undefined;
    message.behaviorRequestId = object.behaviorRequestId ?? "";
    return message;
  },
};

function createBaseRestartBehaviorResponse(): RestartBehaviorResponse {
  return { success: false };
}

export const RestartBehaviorResponse: MessageFns<RestartBehaviorResponse> = {
  encode(message: RestartBehaviorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartBehaviorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartBehaviorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestartBehaviorResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RestartBehaviorResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestartBehaviorResponse>, I>>(base?: I): RestartBehaviorResponse {
    return RestartBehaviorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestartBehaviorResponse>, I>>(object: I): RestartBehaviorResponse {
    const message = createBaseRestartBehaviorResponse();
    message.success = object.success ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
