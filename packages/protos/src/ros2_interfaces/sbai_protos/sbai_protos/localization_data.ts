// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_protos/sbai_protos/localization_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GeoPoint } from "../../../sbai_protos/geo_point";

export const protobufPackage = "sbai_protos";

export interface LocalizationData {
  gpsCoordinate: GeoPoint | undefined;
  magneticHeadingDeg: number;
  bodySpeedMPerS: number;
}

function createBaseLocalizationData(): LocalizationData {
  return { gpsCoordinate: undefined, magneticHeadingDeg: 0, bodySpeedMPerS: 0 };
}

export const LocalizationData: MessageFns<LocalizationData> = {
  encode(message: LocalizationData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gpsCoordinate !== undefined) {
      GeoPoint.encode(message.gpsCoordinate, writer.uint32(50).fork()).join();
    }
    if (message.magneticHeadingDeg !== 0) {
      writer.uint32(57).double(message.magneticHeadingDeg);
    }
    if (message.bodySpeedMPerS !== 0) {
      writer.uint32(73).double(message.bodySpeedMPerS);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalizationData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalizationData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gpsCoordinate = GeoPoint.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.magneticHeadingDeg = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.bodySpeedMPerS = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalizationData {
    return {
      gpsCoordinate: isSet(object.gpsCoordinate) ? GeoPoint.fromJSON(object.gpsCoordinate) : undefined,
      magneticHeadingDeg: isSet(object.magneticHeadingDeg) ? globalThis.Number(object.magneticHeadingDeg) : 0,
      bodySpeedMPerS: isSet(object.bodySpeedMPerS) ? globalThis.Number(object.bodySpeedMPerS) : 0,
    };
  },

  toJSON(message: LocalizationData): unknown {
    const obj: any = {};
    if (message.gpsCoordinate !== undefined) {
      obj.gpsCoordinate = GeoPoint.toJSON(message.gpsCoordinate);
    }
    if (message.magneticHeadingDeg !== 0) {
      obj.magneticHeadingDeg = message.magneticHeadingDeg;
    }
    if (message.bodySpeedMPerS !== 0) {
      obj.bodySpeedMPerS = message.bodySpeedMPerS;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalizationData>, I>>(base?: I): LocalizationData {
    return LocalizationData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalizationData>, I>>(object: I): LocalizationData {
    const message = createBaseLocalizationData();
    message.gpsCoordinate = (object.gpsCoordinate !== undefined && object.gpsCoordinate !== null)
      ? GeoPoint.fromPartial(object.gpsCoordinate)
      : undefined;
    message.magneticHeadingDeg = object.magneticHeadingDeg ?? 0;
    message.bodySpeedMPerS = object.bodySpeedMPerS ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
