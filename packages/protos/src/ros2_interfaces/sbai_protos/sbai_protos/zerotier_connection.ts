// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_protos/sbai_protos/zerotier_connection.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_protos";

/** Backup path information */
export interface ZerotierBackupPath {
  /** Type of internet connection (e.g., starlink, cell, landline) */
  backupInternetType: string;
  /** Owner of the gateway */
  backupGatewayOwner: string;
  /** Number of eligible paths through this interface */
  numEligiblePaths: number;
}

/** Main connection information */
export interface ZerotierConnection {
  /** Basic connection information */
  peerId: string;
  /** Whether the connection is bonded */
  isBonded: boolean;
  /** Whether the connection is tunneled/relayed */
  isRelayed: boolean;
  /** Current active path information */
  activeInternetType: string;
  /** Owner of the gateway */
  activeGatewayOwner: string;
  /** Whether the path is eligible */
  activeEligible: boolean;
  /** Backup paths information */
  backupPaths: ZerotierBackupPath[];
}

function createBaseZerotierBackupPath(): ZerotierBackupPath {
  return { backupInternetType: "", backupGatewayOwner: "", numEligiblePaths: 0 };
}

export const ZerotierBackupPath: MessageFns<ZerotierBackupPath> = {
  encode(message: ZerotierBackupPath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backupInternetType !== "") {
      writer.uint32(10).string(message.backupInternetType);
    }
    if (message.backupGatewayOwner !== "") {
      writer.uint32(18).string(message.backupGatewayOwner);
    }
    if (message.numEligiblePaths !== 0) {
      writer.uint32(24).uint32(message.numEligiblePaths);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZerotierBackupPath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZerotierBackupPath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.backupInternetType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.backupGatewayOwner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numEligiblePaths = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZerotierBackupPath {
    return {
      backupInternetType: isSet(object.backupInternetType) ? globalThis.String(object.backupInternetType) : "",
      backupGatewayOwner: isSet(object.backupGatewayOwner) ? globalThis.String(object.backupGatewayOwner) : "",
      numEligiblePaths: isSet(object.numEligiblePaths) ? globalThis.Number(object.numEligiblePaths) : 0,
    };
  },

  toJSON(message: ZerotierBackupPath): unknown {
    const obj: any = {};
    if (message.backupInternetType !== "") {
      obj.backupInternetType = message.backupInternetType;
    }
    if (message.backupGatewayOwner !== "") {
      obj.backupGatewayOwner = message.backupGatewayOwner;
    }
    if (message.numEligiblePaths !== 0) {
      obj.numEligiblePaths = Math.round(message.numEligiblePaths);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZerotierBackupPath>, I>>(base?: I): ZerotierBackupPath {
    return ZerotierBackupPath.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZerotierBackupPath>, I>>(object: I): ZerotierBackupPath {
    const message = createBaseZerotierBackupPath();
    message.backupInternetType = object.backupInternetType ?? "";
    message.backupGatewayOwner = object.backupGatewayOwner ?? "";
    message.numEligiblePaths = object.numEligiblePaths ?? 0;
    return message;
  },
};

function createBaseZerotierConnection(): ZerotierConnection {
  return {
    peerId: "",
    isBonded: false,
    isRelayed: false,
    activeInternetType: "",
    activeGatewayOwner: "",
    activeEligible: false,
    backupPaths: [],
  };
}

export const ZerotierConnection: MessageFns<ZerotierConnection> = {
  encode(message: ZerotierConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.peerId !== "") {
      writer.uint32(10).string(message.peerId);
    }
    if (message.isBonded !== false) {
      writer.uint32(16).bool(message.isBonded);
    }
    if (message.isRelayed !== false) {
      writer.uint32(24).bool(message.isRelayed);
    }
    if (message.activeInternetType !== "") {
      writer.uint32(34).string(message.activeInternetType);
    }
    if (message.activeGatewayOwner !== "") {
      writer.uint32(42).string(message.activeGatewayOwner);
    }
    if (message.activeEligible !== false) {
      writer.uint32(48).bool(message.activeEligible);
    }
    for (const v of message.backupPaths) {
      ZerotierBackupPath.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZerotierConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZerotierConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.peerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isBonded = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isRelayed = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.activeInternetType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.activeGatewayOwner = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.activeEligible = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.backupPaths.push(ZerotierBackupPath.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZerotierConnection {
    return {
      peerId: isSet(object.peerId) ? globalThis.String(object.peerId) : "",
      isBonded: isSet(object.isBonded) ? globalThis.Boolean(object.isBonded) : false,
      isRelayed: isSet(object.isRelayed) ? globalThis.Boolean(object.isRelayed) : false,
      activeInternetType: isSet(object.activeInternetType) ? globalThis.String(object.activeInternetType) : "",
      activeGatewayOwner: isSet(object.activeGatewayOwner) ? globalThis.String(object.activeGatewayOwner) : "",
      activeEligible: isSet(object.activeEligible) ? globalThis.Boolean(object.activeEligible) : false,
      backupPaths: globalThis.Array.isArray(object?.backupPaths)
        ? object.backupPaths.map((e: any) => ZerotierBackupPath.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ZerotierConnection): unknown {
    const obj: any = {};
    if (message.peerId !== "") {
      obj.peerId = message.peerId;
    }
    if (message.isBonded !== false) {
      obj.isBonded = message.isBonded;
    }
    if (message.isRelayed !== false) {
      obj.isRelayed = message.isRelayed;
    }
    if (message.activeInternetType !== "") {
      obj.activeInternetType = message.activeInternetType;
    }
    if (message.activeGatewayOwner !== "") {
      obj.activeGatewayOwner = message.activeGatewayOwner;
    }
    if (message.activeEligible !== false) {
      obj.activeEligible = message.activeEligible;
    }
    if (message.backupPaths?.length) {
      obj.backupPaths = message.backupPaths.map((e) => ZerotierBackupPath.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZerotierConnection>, I>>(base?: I): ZerotierConnection {
    return ZerotierConnection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZerotierConnection>, I>>(object: I): ZerotierConnection {
    const message = createBaseZerotierConnection();
    message.peerId = object.peerId ?? "";
    message.isBonded = object.isBonded ?? false;
    message.isRelayed = object.isRelayed ?? false;
    message.activeInternetType = object.activeInternetType ?? "";
    message.activeGatewayOwner = object.activeGatewayOwner ?? "";
    message.activeEligible = object.activeEligible ?? false;
    message.backupPaths = object.backupPaths?.map((e) => ZerotierBackupPath.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
