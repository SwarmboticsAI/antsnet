// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_protos/sbai_protos/tag_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { BoolValue } from "../../../google/protobuf/wrappers";
import { RequestHeader } from "../../../sbai_protos/request_header";

export const protobufPackage = "sbai_protos";

export interface TagEventRequest {
  header:
    | RequestHeader
    | undefined;
  /** backwards time delta from message arrival to tag event start */
  eventStartOffset:
    | Duration
    | undefined;
  /** forward time delta from message arrival to tag event end */
  eventEndOffset: Duration | undefined;
  description: string;
  preserveHighBandwidthData: boolean | undefined;
}

export interface TagEventResponse {
  success: boolean | undefined;
  errorMessage?: string | undefined;
}

function createBaseTagEventRequest(): TagEventRequest {
  return {
    header: undefined,
    eventStartOffset: undefined,
    eventEndOffset: undefined,
    description: "",
    preserveHighBandwidthData: undefined,
  };
}

export const TagEventRequest: MessageFns<TagEventRequest> = {
  encode(message: TagEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      RequestHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.eventStartOffset !== undefined) {
      Duration.encode(message.eventStartOffset, writer.uint32(18).fork()).join();
    }
    if (message.eventEndOffset !== undefined) {
      Duration.encode(message.eventEndOffset, writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.preserveHighBandwidthData !== undefined) {
      BoolValue.encode({ value: message.preserveHighBandwidthData! }, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = RequestHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventStartOffset = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventEndOffset = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.preserveHighBandwidthData = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagEventRequest {
    return {
      header: isSet(object.header) ? RequestHeader.fromJSON(object.header) : undefined,
      eventStartOffset: isSet(object.eventStartOffset) ? Duration.fromJSON(object.eventStartOffset) : undefined,
      eventEndOffset: isSet(object.eventEndOffset) ? Duration.fromJSON(object.eventEndOffset) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      preserveHighBandwidthData: isSet(object.preserveHighBandwidthData)
        ? Boolean(object.preserveHighBandwidthData)
        : undefined,
    };
  },

  toJSON(message: TagEventRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = RequestHeader.toJSON(message.header);
    }
    if (message.eventStartOffset !== undefined) {
      obj.eventStartOffset = Duration.toJSON(message.eventStartOffset);
    }
    if (message.eventEndOffset !== undefined) {
      obj.eventEndOffset = Duration.toJSON(message.eventEndOffset);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.preserveHighBandwidthData !== undefined) {
      obj.preserveHighBandwidthData = message.preserveHighBandwidthData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TagEventRequest>, I>>(base?: I): TagEventRequest {
    return TagEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TagEventRequest>, I>>(object: I): TagEventRequest {
    const message = createBaseTagEventRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? RequestHeader.fromPartial(object.header)
      : undefined;
    message.eventStartOffset = (object.eventStartOffset !== undefined && object.eventStartOffset !== null)
      ? Duration.fromPartial(object.eventStartOffset)
      : undefined;
    message.eventEndOffset = (object.eventEndOffset !== undefined && object.eventEndOffset !== null)
      ? Duration.fromPartial(object.eventEndOffset)
      : undefined;
    message.description = object.description ?? "";
    message.preserveHighBandwidthData = object.preserveHighBandwidthData ?? undefined;
    return message;
  },
};

function createBaseTagEventResponse(): TagEventResponse {
  return { success: undefined, errorMessage: undefined };
}

export const TagEventResponse: MessageFns<TagEventResponse> = {
  encode(message: TagEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      BoolValue.encode({ value: message.success! }, writer.uint32(10).fork()).join();
    }
    if (message.errorMessage !== undefined) {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TagEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTagEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.success = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TagEventResponse {
    return {
      success: isSet(object.success) ? Boolean(object.success) : undefined,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : undefined,
    };
  },

  toJSON(message: TagEventResponse): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = message.success;
    }
    if (message.errorMessage !== undefined) {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TagEventResponse>, I>>(base?: I): TagEventResponse {
    return TagEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TagEventResponse>, I>>(object: I): TagEventResponse {
    const message = createBaseTagEventResponse();
    message.success = object.success ?? undefined;
    message.errorMessage = object.errorMessage ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
