// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_protos/sbai_protos/behavior_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../google/protobuf/any";
import { GeoPoint } from "../../../sbai_protos/geo_point";

export const protobufPackage = "sbai_protos";

export enum Behavior {
  BEHAVIOR_UNSPECIFIED = 0,
  BEHAVIOR_SURROUND = 1,
  BEHAVIOR_RALLY = 2,
  BEHAVIOR_DEFEND = 3,
  BEHAVIOR_LINE_FORMATION = 4,
  BEHAVIOR_RAPTOR = 5,
  BEHAVIOR_MULTI_WAYPOINT_NAVIGATION = 6,
  BEHAVIOR_AREA_COVERAGE = 7,
  BEHAVIOR_PATROL = 8,
  UNRECOGNIZED = -1,
}

export function behaviorFromJSON(object: any): Behavior {
  switch (object) {
    case 0:
    case "BEHAVIOR_UNSPECIFIED":
      return Behavior.BEHAVIOR_UNSPECIFIED;
    case 1:
    case "BEHAVIOR_SURROUND":
      return Behavior.BEHAVIOR_SURROUND;
    case 2:
    case "BEHAVIOR_RALLY":
      return Behavior.BEHAVIOR_RALLY;
    case 3:
    case "BEHAVIOR_DEFEND":
      return Behavior.BEHAVIOR_DEFEND;
    case 4:
    case "BEHAVIOR_LINE_FORMATION":
      return Behavior.BEHAVIOR_LINE_FORMATION;
    case 5:
    case "BEHAVIOR_RAPTOR":
      return Behavior.BEHAVIOR_RAPTOR;
    case 6:
    case "BEHAVIOR_MULTI_WAYPOINT_NAVIGATION":
      return Behavior.BEHAVIOR_MULTI_WAYPOINT_NAVIGATION;
    case 7:
    case "BEHAVIOR_AREA_COVERAGE":
      return Behavior.BEHAVIOR_AREA_COVERAGE;
    case 8:
    case "BEHAVIOR_PATROL":
      return Behavior.BEHAVIOR_PATROL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Behavior.UNRECOGNIZED;
  }
}

export function behaviorToJSON(object: Behavior): string {
  switch (object) {
    case Behavior.BEHAVIOR_UNSPECIFIED:
      return "BEHAVIOR_UNSPECIFIED";
    case Behavior.BEHAVIOR_SURROUND:
      return "BEHAVIOR_SURROUND";
    case Behavior.BEHAVIOR_RALLY:
      return "BEHAVIOR_RALLY";
    case Behavior.BEHAVIOR_DEFEND:
      return "BEHAVIOR_DEFEND";
    case Behavior.BEHAVIOR_LINE_FORMATION:
      return "BEHAVIOR_LINE_FORMATION";
    case Behavior.BEHAVIOR_RAPTOR:
      return "BEHAVIOR_RAPTOR";
    case Behavior.BEHAVIOR_MULTI_WAYPOINT_NAVIGATION:
      return "BEHAVIOR_MULTI_WAYPOINT_NAVIGATION";
    case Behavior.BEHAVIOR_AREA_COVERAGE:
      return "BEHAVIOR_AREA_COVERAGE";
    case Behavior.BEHAVIOR_PATROL:
      return "BEHAVIOR_PATROL";
    case Behavior.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BehaviorRequest {
  /** Behavior Enum that is requested */
  requestedBehavior: Behavior;
  /** Unique ID for the requested behavior */
  behaviorRequestId: string;
  /** List of requested behavior participants */
  participatingRobotIds: string[];
  /** A list of ordered GeoPoints that are used as input to the behavior */
  geoPoints: GeoPoint[];
  behaviorParams: Any | undefined;
}

function createBaseBehaviorRequest(): BehaviorRequest {
  return {
    requestedBehavior: 0,
    behaviorRequestId: "",
    participatingRobotIds: [],
    geoPoints: [],
    behaviorParams: undefined,
  };
}

export const BehaviorRequest: MessageFns<BehaviorRequest> = {
  encode(message: BehaviorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestedBehavior !== 0) {
      writer.uint32(8).int32(message.requestedBehavior);
    }
    if (message.behaviorRequestId !== "") {
      writer.uint32(18).string(message.behaviorRequestId);
    }
    for (const v of message.participatingRobotIds) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.geoPoints) {
      GeoPoint.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.behaviorParams !== undefined) {
      Any.encode(message.behaviorParams, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BehaviorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBehaviorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.requestedBehavior = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.behaviorRequestId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.participatingRobotIds.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.geoPoints.push(GeoPoint.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.behaviorParams = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BehaviorRequest {
    return {
      requestedBehavior: isSet(object.requestedBehavior) ? behaviorFromJSON(object.requestedBehavior) : 0,
      behaviorRequestId: isSet(object.behaviorRequestId) ? globalThis.String(object.behaviorRequestId) : "",
      participatingRobotIds: globalThis.Array.isArray(object?.participatingRobotIds)
        ? object.participatingRobotIds.map((e: any) => globalThis.String(e))
        : [],
      geoPoints: globalThis.Array.isArray(object?.geoPoints)
        ? object.geoPoints.map((e: any) => GeoPoint.fromJSON(e))
        : [],
      behaviorParams: isSet(object.behaviorParams) ? Any.fromJSON(object.behaviorParams) : undefined,
    };
  },

  toJSON(message: BehaviorRequest): unknown {
    const obj: any = {};
    if (message.requestedBehavior !== 0) {
      obj.requestedBehavior = behaviorToJSON(message.requestedBehavior);
    }
    if (message.behaviorRequestId !== "") {
      obj.behaviorRequestId = message.behaviorRequestId;
    }
    if (message.participatingRobotIds?.length) {
      obj.participatingRobotIds = message.participatingRobotIds;
    }
    if (message.geoPoints?.length) {
      obj.geoPoints = message.geoPoints.map((e) => GeoPoint.toJSON(e));
    }
    if (message.behaviorParams !== undefined) {
      obj.behaviorParams = Any.toJSON(message.behaviorParams);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BehaviorRequest>, I>>(base?: I): BehaviorRequest {
    return BehaviorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BehaviorRequest>, I>>(object: I): BehaviorRequest {
    const message = createBaseBehaviorRequest();
    message.requestedBehavior = object.requestedBehavior ?? 0;
    message.behaviorRequestId = object.behaviorRequestId ?? "";
    message.participatingRobotIds = object.participatingRobotIds?.map((e) => e) || [];
    message.geoPoints = object.geoPoints?.map((e) => GeoPoint.fromPartial(e)) || [];
    message.behaviorParams = (object.behaviorParams !== undefined && object.behaviorParams !== null)
      ? Any.fromPartial(object.behaviorParams)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
