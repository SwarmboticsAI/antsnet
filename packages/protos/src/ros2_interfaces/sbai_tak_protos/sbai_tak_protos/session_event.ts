// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_tak_protos/sbai_tak_protos/session_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sbai_tak_protos";

export enum SessionEventType {
  SESSION_EVENT_TYPE_UNSPECIFIED = 0,
  SESSION_EVENT_TYPE_SESSION_STARTED = 1,
  SESSION_EVENT_TYPE_REQUEST_REJECTED = 2,
  SESSION_EVENT_TYPE_SESSION_TERMINATED = 3,
  UNRECOGNIZED = -1,
}

export function sessionEventTypeFromJSON(object: any): SessionEventType {
  switch (object) {
    case 0:
    case "SESSION_EVENT_TYPE_UNSPECIFIED":
      return SessionEventType.SESSION_EVENT_TYPE_UNSPECIFIED;
    case 1:
    case "SESSION_EVENT_TYPE_SESSION_STARTED":
      return SessionEventType.SESSION_EVENT_TYPE_SESSION_STARTED;
    case 2:
    case "SESSION_EVENT_TYPE_REQUEST_REJECTED":
      return SessionEventType.SESSION_EVENT_TYPE_REQUEST_REJECTED;
    case 3:
    case "SESSION_EVENT_TYPE_SESSION_TERMINATED":
      return SessionEventType.SESSION_EVENT_TYPE_SESSION_TERMINATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SessionEventType.UNRECOGNIZED;
  }
}

export function sessionEventTypeToJSON(object: SessionEventType): string {
  switch (object) {
    case SessionEventType.SESSION_EVENT_TYPE_UNSPECIFIED:
      return "SESSION_EVENT_TYPE_UNSPECIFIED";
    case SessionEventType.SESSION_EVENT_TYPE_SESSION_STARTED:
      return "SESSION_EVENT_TYPE_SESSION_STARTED";
    case SessionEventType.SESSION_EVENT_TYPE_REQUEST_REJECTED:
      return "SESSION_EVENT_TYPE_REQUEST_REJECTED";
    case SessionEventType.SESSION_EVENT_TYPE_SESSION_TERMINATED:
      return "SESSION_EVENT_TYPE_SESSION_TERMINATED";
    case SessionEventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SessionEvent {
  takId: string;
  robotId: string;
  sessionToken?: string | undefined;
  eventType: SessionEventType;
}

function createBaseSessionEvent(): SessionEvent {
  return { takId: "", robotId: "", sessionToken: undefined, eventType: 0 };
}

export const SessionEvent: MessageFns<SessionEvent> = {
  encode(message: SessionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.takId !== "") {
      writer.uint32(10).string(message.takId);
    }
    if (message.robotId !== "") {
      writer.uint32(18).string(message.robotId);
    }
    if (message.sessionToken !== undefined) {
      writer.uint32(26).string(message.sessionToken);
    }
    if (message.eventType !== 0) {
      writer.uint32(32).int32(message.eventType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.takId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.robotId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sessionToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionEvent {
    return {
      takId: isSet(object.takId) ? globalThis.String(object.takId) : "",
      robotId: isSet(object.robotId) ? globalThis.String(object.robotId) : "",
      sessionToken: isSet(object.sessionToken) ? globalThis.String(object.sessionToken) : undefined,
      eventType: isSet(object.eventType) ? sessionEventTypeFromJSON(object.eventType) : 0,
    };
  },

  toJSON(message: SessionEvent): unknown {
    const obj: any = {};
    if (message.takId !== "") {
      obj.takId = message.takId;
    }
    if (message.robotId !== "") {
      obj.robotId = message.robotId;
    }
    if (message.sessionToken !== undefined) {
      obj.sessionToken = message.sessionToken;
    }
    if (message.eventType !== 0) {
      obj.eventType = sessionEventTypeToJSON(message.eventType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionEvent>, I>>(base?: I): SessionEvent {
    return SessionEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionEvent>, I>>(object: I): SessionEvent {
    const message = createBaseSessionEvent();
    message.takId = object.takId ?? "";
    message.robotId = object.robotId ?? "";
    message.sessionToken = object.sessionToken ?? undefined;
    message.eventType = object.eventType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
