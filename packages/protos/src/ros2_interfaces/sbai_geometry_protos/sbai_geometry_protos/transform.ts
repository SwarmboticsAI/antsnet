// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: ros2_interfaces/sbai_geometry_protos/sbai_geometry_protos/transform.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Quaternion } from "../../../sbai_geometry_protos/quaternion";
import { Vector3 } from "../../../sbai_geometry_protos/vector3";

export const protobufPackage = "sbai_geometry_protos";

export interface Transform {
  translation: Vector3 | undefined;
  rotation: Quaternion | undefined;
}

function createBaseTransform(): Transform {
  return { translation: undefined, rotation: undefined };
}

export const Transform: MessageFns<Transform> = {
  encode(message: Transform, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.translation !== undefined) {
      Vector3.encode(message.translation, writer.uint32(10).fork()).join();
    }
    if (message.rotation !== undefined) {
      Quaternion.encode(message.rotation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transform {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransform();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.translation = Vector3.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rotation = Quaternion.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transform {
    return {
      translation: isSet(object.translation) ? Vector3.fromJSON(object.translation) : undefined,
      rotation: isSet(object.rotation) ? Quaternion.fromJSON(object.rotation) : undefined,
    };
  },

  toJSON(message: Transform): unknown {
    const obj: any = {};
    if (message.translation !== undefined) {
      obj.translation = Vector3.toJSON(message.translation);
    }
    if (message.rotation !== undefined) {
      obj.rotation = Quaternion.toJSON(message.rotation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transform>, I>>(base?: I): Transform {
    return Transform.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transform>, I>>(object: I): Transform {
    const message = createBaseTransform();
    message.translation = (object.translation !== undefined && object.translation !== null)
      ? Vector3.fromPartial(object.translation)
      : undefined;
    message.rotation = (object.rotation !== undefined && object.rotation !== null)
      ? Quaternion.fromPartial(object.rotation)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
